import { z } from "zod";

/* This file was generated, do not edit manually */

export function registerServerTools(server, sendRpcRequest, logger) {
  server.tool(
    "authAttachAccount",
    "Add a new Google account.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("auth.attach_account", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.attach_account: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "authClaimAccount",
    "Claim a Google account.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ token: z.string(),
    },
    async ({ token }) => {
      try {
        const data = await sendRpcRequest("auth.claim_account", [token]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.claim_account: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "authDeleteAccount",
    "Delete Routine account.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("auth.delete_account", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.delete_account: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("authId", "The user unique id.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("auth.id", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching auth.id: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("authLogout", "Logout from current account.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("auth.logout", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching auth.logout: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("authProfile", "Main user identity.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("auth.profile", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching auth.profile: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("authProfiles", "User identities.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("auth.profiles", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching auth.profiles: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "authRefresh",
    "Reload the available Google ressource, eg. in case of scope grant.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("auth.refresh", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.refresh: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "authRequestScopes",
    "Request additional Google scopes.",
    {
      /*
{"$id":"#google-account-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ account: z.string(),

      /*
{"additionalProperties":false,"properties":{"basic":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Basic","default":false,"type":"boolean"},"contact_directory":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Contact_directory","default":false,"type":"boolean"},"drive":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Drive","default":false,"type":"boolean"},"gmail":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Gmail","default":false,"type":"boolean"},"tasks":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tasks","default":false,"type":"boolean"}},"$id":"#google_scope","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ scopes: z
        .object({
          basic: z.boolean().default(false),
          contact_directory: z.boolean().default(false),
          drive: z.boolean().default(false),
          gmail: z.boolean().default(false),
          tasks: z.boolean().default(false),
        })
        .strict(),
    },
    async ({ account, scopes }) => {
      try {
        const data = await sendRpcRequest("auth.request_scopes", [
          account,
          scopes,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.request_scopes: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("authUid", "User unique id.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("auth.uid", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching auth.uid: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "authUnlinkAccount",
    "Unlink a Google account.",
    {
      /*
{"$id":"#google-account-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ identity: z.string(),
    },
    async ({ identity }) => {
      try {
        const data = await sendRpcRequest("auth.unlink_account", [identity]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.unlink_account: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "authRegisterHandler",
    "Register the handler for the authentication effects",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("auth.register_handler", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching auth.register_handler: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("calendarAll", "All calendars.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("calendar.all", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching calendar.all: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("calendarDefaultCal", "Default calendar.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("calendar.default_cal", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching calendar.default_cal: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "calendarGet",
    "A calendar.",
    {
      /*
{"$id":"#calendar-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("calendar.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching calendar.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "calendarSelect",
    "Change calendar configuration.",
    {
      /*
{"$id":"#calendar-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"color":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"a","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"b","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"c","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"d","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"e","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"f","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"g","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"h","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"i","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Color","default":null,"type":["null","string"]},"disabled":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Disabled","default":null,"type":["boolean","null"]},"role":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"default","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"primary","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"secondary","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Role","default":null,"type":["null","string"]}},"$id":"#calendar-config-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          color: z
            .union([
              z.null(),
              z.literal("a"),
              z.literal("b"),
              z.literal("c"),
              z.literal("d"),
              z.literal("e"),
              z.literal("f"),
              z.literal("g"),
              z.literal("h"),
              z.literal("i"),
            ])
            .default(null),
          disabled: z.union([z.boolean(), z.null()]).default(null),
          role: z
            .union([
              z.null(),
              z.literal("default"),
              z.literal("primary"),
              z.literal("secondary"),
            ])
            .default(null),
        })
        .strict(),
    },
    async ({ id, patch }) => {
      try {
        const data = await sendRpcRequest("calendar.select", [id, patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching calendar.select: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "calendarSelectDefault",
    "Select default calendar.",
    {
      /*
{"$id":"#calendar-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("calendar.select_default", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching calendar.select_default: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("deviceGet", "The user's list of devices.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("device.get", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching device.get: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "devicePatch",
    "Modify a device.",
    {
      /*
{"$id":"#device-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":null,"type":["null","string"]},"push_token":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Push_token","default":null,"type":["null","string"]}},"$id":"#device-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          name: z.union([z.null(), z.string()]).default(null),
          push_token: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),
    },
    async ({ id, patch }) => {
      try {
        const data = await sendRpcRequest("device.patch", [id, patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching device.patch: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "deviceSelf",
    "The id of the device the user is currently logged on.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("device.self", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching device.self: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "documentAppend",
    "Append a block to object notes.",
    {
      /*
{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ document: z
        .object({
          id: z
            .object({
              kind: z
                .union([
                  z.literal("event"),
                  z.literal("event-rec"),
                  z.literal("page"),
                  z.literal("people"),
                  z.literal("task"),
                  z.literal("task-rec"),
                ])
                .optional(),
              id: z.string().optional(),
            })
            .strict()
            .optional(),
          section: z.tuple([z.string(), z.number().int()]).optional(),
        })
        .strict(),

      /*
{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ block: z.record(z.any()).and(
        z.union([
          z
            .object({
              id: z.string().optional(),
              type: z.literal("blockquote").optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("bullet").optional(),
              list_type: z
                .union([z.literal("ordered"), z.literal("unordered")])
                .optional(),
              content: z.string().optional(),
              depth: z.number().int().default(0),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("check").optional(),
              checked: z.boolean().optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("code").optional(),
              language: z.string().optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("callout").optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("divider").optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("embed").optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("heading").optional(),
              content: z.string().optional(),
              level: z.number().int().optional(),
              retracted: z.boolean().default(false),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("paragraph").optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("query").optional(),
              content: z.string().optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("recurrent_task").optional(),
              recurrent_task_id: z.string().optional(),
              content: z.string().optional(),
              recurrence: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        start: z
                          .tuple([
                            z.number().int(),
                            z.number().int(),
                            z.number().int(),
                          ])
                          .optional(),
                        count: z.number().int().optional(),
                        rule: z
                          .record(z.any())
                          .and(
                            z.union([
                              z
                                .object({
                                  every: z.literal("day").optional(),
                                  period: z.number().int().default(1),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("month").optional(),
                                  period: z.number().int().default(1),
                                  day: z
                                    .union([
                                      z.number().int(),
                                      z.tuple([
                                        z.union([
                                          z.literal("monday"),
                                          z.literal("tuesday"),
                                          z.literal("wednesday"),
                                          z.literal("thursday"),
                                          z.literal("friday"),
                                          z.literal("saturday"),
                                          z.literal("sunday"),
                                        ]),
                                        z.number().int(),
                                      ]),
                                    ])
                                    .optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("week").optional(),
                                  period: z.number().int().default(1),
                                  weekdays: z
                                    .object({
                                      monday: z.boolean().default(false),
                                      tuesday: z.boolean().default(false),
                                      wednesday: z.boolean().default(false),
                                      thursday: z.boolean().default(false),
                                      friday: z.boolean().default(false),
                                      saturday: z.boolean().default(false),
                                      sunday: z.boolean().default(false),
                                    })
                                    .strict()
                                    .optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("workday").optional(),
                                  period: z.number().int().default(1),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("year").optional(),
                                  period: z.number().int().default(1),
                                  day: z.number().int().optional(),
                                  month: z
                                    .union([
                                      z.literal("january"),
                                      z.literal("february"),
                                      z.literal("march"),
                                      z.literal("april"),
                                      z.literal("may"),
                                      z.literal("june"),
                                      z.literal("july"),
                                      z.literal("august"),
                                      z.literal("september"),
                                      z.literal("october"),
                                      z.literal("november"),
                                      z.literal("december"),
                                    ])
                                    .optional(),
                                })
                                .strict(),
                            ])
                          )
                          .optional(),
                      })
                      .strict(),
                    z
                      .object({
                        end: z.any().optional(),
                        start: z.any().optional(),
                        rule: z
                          .record(z.any())
                          .and(
                            z.union([
                              z
                                .object({
                                  every: z.literal("day").optional(),
                                  period: z.number().int().default(1),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("month").optional(),
                                  period: z.number().int().default(1),
                                  day: z
                                    .union([
                                      z.number().int(),
                                      z.tuple([
                                        z.union([
                                          z.literal("monday"),
                                          z.literal("tuesday"),
                                          z.literal("wednesday"),
                                          z.literal("thursday"),
                                          z.literal("friday"),
                                          z.literal("saturday"),
                                          z.literal("sunday"),
                                        ]),
                                        z.number().int(),
                                      ]),
                                    ])
                                    .optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("week").optional(),
                                  period: z.number().int().default(1),
                                  weekdays: z
                                    .object({
                                      monday: z.boolean().default(false),
                                      tuesday: z.boolean().default(false),
                                      wednesday: z.boolean().default(false),
                                      thursday: z.boolean().default(false),
                                      friday: z.boolean().default(false),
                                      saturday: z.boolean().default(false),
                                      sunday: z.boolean().default(false),
                                    })
                                    .strict()
                                    .optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("workday").optional(),
                                  period: z.number().int().default(1),
                                })
                                .strict(),
                              z
                                .object({
                                  every: z.literal("year").optional(),
                                  period: z.number().int().default(1),
                                  day: z.number().int().optional(),
                                  month: z
                                    .union([
                                      z.literal("january"),
                                      z.literal("february"),
                                      z.literal("march"),
                                      z.literal("april"),
                                      z.literal("may"),
                                      z.literal("june"),
                                      z.literal("july"),
                                      z.literal("august"),
                                      z.literal("september"),
                                      z.literal("october"),
                                      z.literal("november"),
                                      z.literal("december"),
                                    ])
                                    .optional(),
                                })
                                .strict(),
                            ])
                          )
                          .optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              id: z.string().optional(),
              type: z.literal("todo").optional(),
              checked: z.boolean().optional(),
              content: z.string().optional(),
              task: z.string().optional(),
            })
            .strict(),
        ])
      ),
    },
    async ({ document, block }) => {
      try {
        const data = await sendRpcRequest("document.append", [document, block]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching document.append: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "documentMerge",
    "Three-way merge a document",
    {
      /*
{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ base: z
        .object({
          blocks: z
            .array(
              z.record(z.any()).and(
                z.union([
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("blockquote").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("bullet").optional(),
                      list_type: z
                        .union([z.literal("ordered"), z.literal("unordered")])
                        .optional(),
                      content: z.string().optional(),
                      depth: z.number().int().default(0),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("check").optional(),
                      checked: z.boolean().optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("code").optional(),
                      language: z.string().optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("callout").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("divider").optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("embed").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("heading").optional(),
                      content: z.string().optional(),
                      level: z.number().int().optional(),
                      retracted: z.boolean().default(false),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("paragraph").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("query").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("recurrent_task").optional(),
                      recurrent_task_id: z.string().optional(),
                      content: z.string().optional(),
                      recurrence: z
                        .record(z.any())
                        .and(
                          z.union([
                            z
                              .object({
                                start: z
                                  .tuple([
                                    z.number().int(),
                                    z.number().int(),
                                    z.number().int(),
                                  ])
                                  .optional(),
                                count: z.number().int().optional(),
                                rule: z
                                  .record(z.any())
                                  .and(
                                    z.union([
                                      z
                                        .object({
                                          every: z.literal("day").optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("month").optional(),
                                          period: z.number().int().default(1),
                                          day: z
                                            .union([
                                              z.number().int(),
                                              z.tuple([
                                                z.union([
                                                  z.literal("monday"),
                                                  z.literal("tuesday"),
                                                  z.literal("wednesday"),
                                                  z.literal("thursday"),
                                                  z.literal("friday"),
                                                  z.literal("saturday"),
                                                  z.literal("sunday"),
                                                ]),
                                                z.number().int(),
                                              ]),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("week").optional(),
                                          period: z.number().int().default(1),
                                          weekdays: z
                                            .object({
                                              monday: z
                                                .boolean()
                                                .default(false),
                                              tuesday: z
                                                .boolean()
                                                .default(false),
                                              wednesday: z
                                                .boolean()
                                                .default(false),
                                              thursday: z
                                                .boolean()
                                                .default(false),
                                              friday: z
                                                .boolean()
                                                .default(false),
                                              saturday: z
                                                .boolean()
                                                .default(false),
                                              sunday: z
                                                .boolean()
                                                .default(false),
                                            })
                                            .strict()
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z
                                            .literal("workday")
                                            .optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("year").optional(),
                                          period: z.number().int().default(1),
                                          day: z.number().int().optional(),
                                          month: z
                                            .union([
                                              z.literal("january"),
                                              z.literal("february"),
                                              z.literal("march"),
                                              z.literal("april"),
                                              z.literal("may"),
                                              z.literal("june"),
                                              z.literal("july"),
                                              z.literal("august"),
                                              z.literal("september"),
                                              z.literal("october"),
                                              z.literal("november"),
                                              z.literal("december"),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                    ])
                                  )
                                  .optional(),
                              })
                              .strict(),
                            z
                              .object({
                                end: z.any().optional(),
                                start: z.any().optional(),
                                rule: z
                                  .record(z.any())
                                  .and(
                                    z.union([
                                      z
                                        .object({
                                          every: z.literal("day").optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("month").optional(),
                                          period: z.number().int().default(1),
                                          day: z
                                            .union([
                                              z.number().int(),
                                              z.tuple([
                                                z.union([
                                                  z.literal("monday"),
                                                  z.literal("tuesday"),
                                                  z.literal("wednesday"),
                                                  z.literal("thursday"),
                                                  z.literal("friday"),
                                                  z.literal("saturday"),
                                                  z.literal("sunday"),
                                                ]),
                                                z.number().int(),
                                              ]),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("week").optional(),
                                          period: z.number().int().default(1),
                                          weekdays: z
                                            .object({
                                              monday: z
                                                .boolean()
                                                .default(false),
                                              tuesday: z
                                                .boolean()
                                                .default(false),
                                              wednesday: z
                                                .boolean()
                                                .default(false),
                                              thursday: z
                                                .boolean()
                                                .default(false),
                                              friday: z
                                                .boolean()
                                                .default(false),
                                              saturday: z
                                                .boolean()
                                                .default(false),
                                              sunday: z
                                                .boolean()
                                                .default(false),
                                            })
                                            .strict()
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z
                                            .literal("workday")
                                            .optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("year").optional(),
                                          period: z.number().int().default(1),
                                          day: z.number().int().optional(),
                                          month: z
                                            .union([
                                              z.literal("january"),
                                              z.literal("february"),
                                              z.literal("march"),
                                              z.literal("april"),
                                              z.literal("may"),
                                              z.literal("june"),
                                              z.literal("july"),
                                              z.literal("august"),
                                              z.literal("september"),
                                              z.literal("october"),
                                              z.literal("november"),
                                              z.literal("december"),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                    ])
                                  )
                                  .optional(),
                              })
                              .strict(),
                          ])
                        )
                        .optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("todo").optional(),
                      checked: z.boolean().optional(),
                      content: z.string().optional(),
                      task: z.string().optional(),
                    })
                    .strict(),
                ])
              )
            )
            .optional(),
        })
        .strict(),

      /*
{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ remote: z
        .object({
          blocks: z
            .array(
              z.record(z.any()).and(
                z.union([
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("blockquote").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("bullet").optional(),
                      list_type: z
                        .union([z.literal("ordered"), z.literal("unordered")])
                        .optional(),
                      content: z.string().optional(),
                      depth: z.number().int().default(0),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("check").optional(),
                      checked: z.boolean().optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("code").optional(),
                      language: z.string().optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("callout").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("divider").optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("embed").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("heading").optional(),
                      content: z.string().optional(),
                      level: z.number().int().optional(),
                      retracted: z.boolean().default(false),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("paragraph").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("query").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("recurrent_task").optional(),
                      recurrent_task_id: z.string().optional(),
                      content: z.string().optional(),
                      recurrence: z
                        .record(z.any())
                        .and(
                          z.union([
                            z
                              .object({
                                start: z
                                  .tuple([
                                    z.number().int(),
                                    z.number().int(),
                                    z.number().int(),
                                  ])
                                  .optional(),
                                count: z.number().int().optional(),
                                rule: z
                                  .record(z.any())
                                  .and(
                                    z.union([
                                      z
                                        .object({
                                          every: z.literal("day").optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("month").optional(),
                                          period: z.number().int().default(1),
                                          day: z
                                            .union([
                                              z.number().int(),
                                              z.tuple([
                                                z.union([
                                                  z.literal("monday"),
                                                  z.literal("tuesday"),
                                                  z.literal("wednesday"),
                                                  z.literal("thursday"),
                                                  z.literal("friday"),
                                                  z.literal("saturday"),
                                                  z.literal("sunday"),
                                                ]),
                                                z.number().int(),
                                              ]),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("week").optional(),
                                          period: z.number().int().default(1),
                                          weekdays: z
                                            .object({
                                              monday: z
                                                .boolean()
                                                .default(false),
                                              tuesday: z
                                                .boolean()
                                                .default(false),
                                              wednesday: z
                                                .boolean()
                                                .default(false),
                                              thursday: z
                                                .boolean()
                                                .default(false),
                                              friday: z
                                                .boolean()
                                                .default(false),
                                              saturday: z
                                                .boolean()
                                                .default(false),
                                              sunday: z
                                                .boolean()
                                                .default(false),
                                            })
                                            .strict()
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z
                                            .literal("workday")
                                            .optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("year").optional(),
                                          period: z.number().int().default(1),
                                          day: z.number().int().optional(),
                                          month: z
                                            .union([
                                              z.literal("january"),
                                              z.literal("february"),
                                              z.literal("march"),
                                              z.literal("april"),
                                              z.literal("may"),
                                              z.literal("june"),
                                              z.literal("july"),
                                              z.literal("august"),
                                              z.literal("september"),
                                              z.literal("october"),
                                              z.literal("november"),
                                              z.literal("december"),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                    ])
                                  )
                                  .optional(),
                              })
                              .strict(),
                            z
                              .object({
                                end: z.any().optional(),
                                start: z.any().optional(),
                                rule: z
                                  .record(z.any())
                                  .and(
                                    z.union([
                                      z
                                        .object({
                                          every: z.literal("day").optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("month").optional(),
                                          period: z.number().int().default(1),
                                          day: z
                                            .union([
                                              z.number().int(),
                                              z.tuple([
                                                z.union([
                                                  z.literal("monday"),
                                                  z.literal("tuesday"),
                                                  z.literal("wednesday"),
                                                  z.literal("thursday"),
                                                  z.literal("friday"),
                                                  z.literal("saturday"),
                                                  z.literal("sunday"),
                                                ]),
                                                z.number().int(),
                                              ]),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("week").optional(),
                                          period: z.number().int().default(1),
                                          weekdays: z
                                            .object({
                                              monday: z
                                                .boolean()
                                                .default(false),
                                              tuesday: z
                                                .boolean()
                                                .default(false),
                                              wednesday: z
                                                .boolean()
                                                .default(false),
                                              thursday: z
                                                .boolean()
                                                .default(false),
                                              friday: z
                                                .boolean()
                                                .default(false),
                                              saturday: z
                                                .boolean()
                                                .default(false),
                                              sunday: z
                                                .boolean()
                                                .default(false),
                                            })
                                            .strict()
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z
                                            .literal("workday")
                                            .optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("year").optional(),
                                          period: z.number().int().default(1),
                                          day: z.number().int().optional(),
                                          month: z
                                            .union([
                                              z.literal("january"),
                                              z.literal("february"),
                                              z.literal("march"),
                                              z.literal("april"),
                                              z.literal("may"),
                                              z.literal("june"),
                                              z.literal("july"),
                                              z.literal("august"),
                                              z.literal("september"),
                                              z.literal("october"),
                                              z.literal("november"),
                                              z.literal("december"),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                    ])
                                  )
                                  .optional(),
                              })
                              .strict(),
                          ])
                        )
                        .optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("todo").optional(),
                      checked: z.boolean().optional(),
                      content: z.string().optional(),
                      task: z.string().optional(),
                    })
                    .strict(),
                ])
              )
            )
            .optional(),
        })
        .strict(),

      /*
{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ local: z
        .object({
          blocks: z
            .array(
              z.record(z.any()).and(
                z.union([
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("blockquote").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("bullet").optional(),
                      list_type: z
                        .union([z.literal("ordered"), z.literal("unordered")])
                        .optional(),
                      content: z.string().optional(),
                      depth: z.number().int().default(0),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("check").optional(),
                      checked: z.boolean().optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("code").optional(),
                      language: z.string().optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("callout").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("divider").optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("embed").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("heading").optional(),
                      content: z.string().optional(),
                      level: z.number().int().optional(),
                      retracted: z.boolean().default(false),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("paragraph").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("query").optional(),
                      content: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("recurrent_task").optional(),
                      recurrent_task_id: z.string().optional(),
                      content: z.string().optional(),
                      recurrence: z
                        .record(z.any())
                        .and(
                          z.union([
                            z
                              .object({
                                start: z
                                  .tuple([
                                    z.number().int(),
                                    z.number().int(),
                                    z.number().int(),
                                  ])
                                  .optional(),
                                count: z.number().int().optional(),
                                rule: z
                                  .record(z.any())
                                  .and(
                                    z.union([
                                      z
                                        .object({
                                          every: z.literal("day").optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("month").optional(),
                                          period: z.number().int().default(1),
                                          day: z
                                            .union([
                                              z.number().int(),
                                              z.tuple([
                                                z.union([
                                                  z.literal("monday"),
                                                  z.literal("tuesday"),
                                                  z.literal("wednesday"),
                                                  z.literal("thursday"),
                                                  z.literal("friday"),
                                                  z.literal("saturday"),
                                                  z.literal("sunday"),
                                                ]),
                                                z.number().int(),
                                              ]),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("week").optional(),
                                          period: z.number().int().default(1),
                                          weekdays: z
                                            .object({
                                              monday: z
                                                .boolean()
                                                .default(false),
                                              tuesday: z
                                                .boolean()
                                                .default(false),
                                              wednesday: z
                                                .boolean()
                                                .default(false),
                                              thursday: z
                                                .boolean()
                                                .default(false),
                                              friday: z
                                                .boolean()
                                                .default(false),
                                              saturday: z
                                                .boolean()
                                                .default(false),
                                              sunday: z
                                                .boolean()
                                                .default(false),
                                            })
                                            .strict()
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z
                                            .literal("workday")
                                            .optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("year").optional(),
                                          period: z.number().int().default(1),
                                          day: z.number().int().optional(),
                                          month: z
                                            .union([
                                              z.literal("january"),
                                              z.literal("february"),
                                              z.literal("march"),
                                              z.literal("april"),
                                              z.literal("may"),
                                              z.literal("june"),
                                              z.literal("july"),
                                              z.literal("august"),
                                              z.literal("september"),
                                              z.literal("october"),
                                              z.literal("november"),
                                              z.literal("december"),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                    ])
                                  )
                                  .optional(),
                              })
                              .strict(),
                            z
                              .object({
                                end: z.any().optional(),
                                start: z.any().optional(),
                                rule: z
                                  .record(z.any())
                                  .and(
                                    z.union([
                                      z
                                        .object({
                                          every: z.literal("day").optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("month").optional(),
                                          period: z.number().int().default(1),
                                          day: z
                                            .union([
                                              z.number().int(),
                                              z.tuple([
                                                z.union([
                                                  z.literal("monday"),
                                                  z.literal("tuesday"),
                                                  z.literal("wednesday"),
                                                  z.literal("thursday"),
                                                  z.literal("friday"),
                                                  z.literal("saturday"),
                                                  z.literal("sunday"),
                                                ]),
                                                z.number().int(),
                                              ]),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("week").optional(),
                                          period: z.number().int().default(1),
                                          weekdays: z
                                            .object({
                                              monday: z
                                                .boolean()
                                                .default(false),
                                              tuesday: z
                                                .boolean()
                                                .default(false),
                                              wednesday: z
                                                .boolean()
                                                .default(false),
                                              thursday: z
                                                .boolean()
                                                .default(false),
                                              friday: z
                                                .boolean()
                                                .default(false),
                                              saturday: z
                                                .boolean()
                                                .default(false),
                                              sunday: z
                                                .boolean()
                                                .default(false),
                                            })
                                            .strict()
                                            .optional(),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z
                                            .literal("workday")
                                            .optional(),
                                          period: z.number().int().default(1),
                                        })
                                        .strict(),
                                      z
                                        .object({
                                          every: z.literal("year").optional(),
                                          period: z.number().int().default(1),
                                          day: z.number().int().optional(),
                                          month: z
                                            .union([
                                              z.literal("january"),
                                              z.literal("february"),
                                              z.literal("march"),
                                              z.literal("april"),
                                              z.literal("may"),
                                              z.literal("june"),
                                              z.literal("july"),
                                              z.literal("august"),
                                              z.literal("september"),
                                              z.literal("october"),
                                              z.literal("november"),
                                              z.literal("december"),
                                            ])
                                            .optional(),
                                        })
                                        .strict(),
                                    ])
                                  )
                                  .optional(),
                              })
                              .strict(),
                          ])
                        )
                        .optional(),
                    })
                    .strict(),
                  z
                    .object({
                      id: z.string().optional(),
                      type: z.literal("todo").optional(),
                      checked: z.boolean().optional(),
                      content: z.string().optional(),
                      task: z.string().optional(),
                    })
                    .strict(),
                ])
              )
            )
            .optional(),
        })
        .strict(),
    },
    async ({ base, remote, local }) => {
      try {
        const data = await sendRpcRequest("document.merge", [
          base,
          remote,
          local,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching document.merge: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "documentRemoveMetadata",
    "Remove metadata from blocks to eg. duplicate them.",
    {
      /*
{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ blocks: z.array(
        z.record(z.any()).and(
          z.union([
            z
              .object({
                id: z.string().optional(),
                type: z.literal("blockquote").optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("bullet").optional(),
                list_type: z
                  .union([z.literal("ordered"), z.literal("unordered")])
                  .optional(),
                content: z.string().optional(),
                depth: z.number().int().default(0),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("check").optional(),
                checked: z.boolean().optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("code").optional(),
                language: z.string().optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("callout").optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("divider").optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("embed").optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("heading").optional(),
                content: z.string().optional(),
                level: z.number().int().optional(),
                retracted: z.boolean().default(false),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("paragraph").optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("query").optional(),
                content: z.string().optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("recurrent_task").optional(),
                recurrent_task_id: z.string().optional(),
                content: z.string().optional(),
                recurrence: z
                  .record(z.any())
                  .and(
                    z.union([
                      z
                        .object({
                          start: z
                            .tuple([
                              z.number().int(),
                              z.number().int(),
                              z.number().int(),
                            ])
                            .optional(),
                          count: z.number().int().optional(),
                          rule: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    every: z.literal("day").optional(),
                                    period: z.number().int().default(1),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("month").optional(),
                                    period: z.number().int().default(1),
                                    day: z
                                      .union([
                                        z.number().int(),
                                        z.tuple([
                                          z.union([
                                            z.literal("monday"),
                                            z.literal("tuesday"),
                                            z.literal("wednesday"),
                                            z.literal("thursday"),
                                            z.literal("friday"),
                                            z.literal("saturday"),
                                            z.literal("sunday"),
                                          ]),
                                          z.number().int(),
                                        ]),
                                      ])
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("week").optional(),
                                    period: z.number().int().default(1),
                                    weekdays: z
                                      .object({
                                        monday: z.boolean().default(false),
                                        tuesday: z.boolean().default(false),
                                        wednesday: z.boolean().default(false),
                                        thursday: z.boolean().default(false),
                                        friday: z.boolean().default(false),
                                        saturday: z.boolean().default(false),
                                        sunday: z.boolean().default(false),
                                      })
                                      .strict()
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("workday").optional(),
                                    period: z.number().int().default(1),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("year").optional(),
                                    period: z.number().int().default(1),
                                    day: z.number().int().optional(),
                                    month: z
                                      .union([
                                        z.literal("january"),
                                        z.literal("february"),
                                        z.literal("march"),
                                        z.literal("april"),
                                        z.literal("may"),
                                        z.literal("june"),
                                        z.literal("july"),
                                        z.literal("august"),
                                        z.literal("september"),
                                        z.literal("october"),
                                        z.literal("november"),
                                        z.literal("december"),
                                      ])
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                      z
                        .object({
                          end: z.any().optional(),
                          start: z.any().optional(),
                          rule: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    every: z.literal("day").optional(),
                                    period: z.number().int().default(1),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("month").optional(),
                                    period: z.number().int().default(1),
                                    day: z
                                      .union([
                                        z.number().int(),
                                        z.tuple([
                                          z.union([
                                            z.literal("monday"),
                                            z.literal("tuesday"),
                                            z.literal("wednesday"),
                                            z.literal("thursday"),
                                            z.literal("friday"),
                                            z.literal("saturday"),
                                            z.literal("sunday"),
                                          ]),
                                          z.number().int(),
                                        ]),
                                      ])
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("week").optional(),
                                    period: z.number().int().default(1),
                                    weekdays: z
                                      .object({
                                        monday: z.boolean().default(false),
                                        tuesday: z.boolean().default(false),
                                        wednesday: z.boolean().default(false),
                                        thursday: z.boolean().default(false),
                                        friday: z.boolean().default(false),
                                        saturday: z.boolean().default(false),
                                        sunday: z.boolean().default(false),
                                      })
                                      .strict()
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("workday").optional(),
                                    period: z.number().int().default(1),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    every: z.literal("year").optional(),
                                    period: z.number().int().default(1),
                                    day: z.number().int().optional(),
                                    month: z
                                      .union([
                                        z.literal("january"),
                                        z.literal("february"),
                                        z.literal("march"),
                                        z.literal("april"),
                                        z.literal("may"),
                                        z.literal("june"),
                                        z.literal("july"),
                                        z.literal("august"),
                                        z.literal("september"),
                                        z.literal("october"),
                                        z.literal("november"),
                                        z.literal("december"),
                                      ])
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                    ])
                  )
                  .optional(),
              })
              .strict(),
            z
              .object({
                id: z.string().optional(),
                type: z.literal("todo").optional(),
                checked: z.boolean().optional(),
                content: z.string().optional(),
                task: z.string().optional(),
              })
              .strict(),
          ])
        )
      ),
    },
    async ({ blocks }) => {
      try {
        const data = await sendRpcRequest("document.remove_metadata", [blocks]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching document.remove_metadata: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "documentGenerateBlockId",
    "Generate a block ID",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("document.generate_block_id", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching document.generate_block_id: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventAllocate",
    "Find a free slot to create an event.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ name: z.string(),

      /*
{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"dates":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"date","type":"string"},"date":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Date","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"date_range","type":"string"},"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"month","type":"string"},"hint":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hint","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"},"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"week","type":"string"},"week":{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Week","type":"object"},"hint":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hint","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"year","type":"string"},"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#mandate-dates","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Dates","type":"object"},"daytime":{"items":[{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$id":"#daytime","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Daytime","type":"array"},"document":{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Document","type":"object"},"duration":{"$id":"#span","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Duration","type":"integer"},"participants":{"items":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"emailPrimary":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"EmailPrimary","type":"string"},"helper":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Helper","type":"string"},"id":{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#mandate-participant","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#mandate-participant-mandate-participant-lenient","$schema":"https://json-schema.org/draft/2019-09/schema","type":["object","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Participants","default":[],"type":"array"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#weekday"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#month","title":"Month"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#weekday"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#month","title":"Month"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"},"slot":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"additionalProperties":false,"properties":{"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"focus","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"meetings","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"processing","type":"string"}],"$id":"#slot-kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"}},"$id":"#slot-type","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Slot","type":"array"}},"$id":"#action_allocation","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ allocation: z
        .object({
          calendar: z.string().optional(),
          dates: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    type: z.literal("date").optional(),
                    date: z
                      .tuple([
                        z.number().int(),
                        z.number().int(),
                        z.number().int(),
                      ])
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("date_range").optional(),
                    end: z.any().optional(),
                    start: z.any().optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("month").optional(),
                    hint: z.number().int().optional(),
                    month: z
                      .union([
                        z.literal("january"),
                        z.literal("february"),
                        z.literal("march"),
                        z.literal("april"),
                        z.literal("may"),
                        z.literal("june"),
                        z.literal("july"),
                        z.literal("august"),
                        z.literal("september"),
                        z.literal("october"),
                        z.literal("november"),
                        z.literal("december"),
                      ])
                      .optional(),
                    year: z.number().int().optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("week").optional(),
                    week: z
                      .object({
                        year: z.number().int().optional(),
                        n: z.number().int().optional(),
                      })
                      .strict()
                      .optional(),
                    hint: z
                      .union([
                        z.literal("monday"),
                        z.literal("tuesday"),
                        z.literal("wednesday"),
                        z.literal("thursday"),
                        z.literal("friday"),
                        z.literal("saturday"),
                        z.literal("sunday"),
                      ])
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("year").optional(),
                    year: z.number().int().optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          daytime: z
            .tuple([
              z
                .object({
                  hours: z.number().int().gte(0).lte(24).optional(),
                  minutes: z.number().int().gte(0).lte(60).default(0),
                  seconds: z.number().int().gte(0).lte(60).default(0),
                })
                .strict(),
              z.union([
                z.null(),
                z
                  .object({
                    hours: z.number().int().gte(0).lte(24).optional(),
                    minutes: z.number().int().gte(0).lte(60),
                    seconds: z.number().int().gte(0).lte(60),
                  })
                  .strict(),
              ]),
            ])
            .optional(),
          document: z
            .object({
              id: z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict()
                .optional(),
              section: z.tuple([z.string(), z.number().int()]).optional(),
            })
            .strict()
            .optional(),
          duration: z.number().int().optional(),
          participants: z
            .array(
              z.union([
                z.string(),
                z
                  .object({
                    email: z.string().optional(),
                    emailPrimary: z.string().optional(),
                    helper: z.string().optional(),
                    id: z.string().optional(),
                  })
                  .strict(),
              ])
            )
            .default([]),
          recurrence: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    start: z.any().optional(),
                    count: z.number().int().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([z.any(), z.number().int()]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z.any().optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    end: z.any().optional(),
                    start: z.any().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([z.any(), z.number().int()]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z.any().optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          slot: z
            .tuple([
              z.string(),
              z
                .object({
                  name: z.string().optional(),
                  kind: z
                    .union([
                      z.literal("focus"),
                      z.literal("meetings"),
                      z.literal("processing"),
                    ])
                    .optional(),
                })
                .strict(),
            ])
            .optional(),
        })
        .strict(),
    },
    async ({ name, allocation }) => {
      try {
        const data = await sendRpcRequest("event.allocate", [name, allocation]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.allocate: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventComplete",
    "Complete an event.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.complete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.complete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventCreate",
    "Add an event.",
    {
      /*
{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"draft":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Draft","type":"boolean"},"archived":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Archived","default":null,"type":["null","string"]},"attendance":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"attend","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ignore","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendance","default":null,"type":["null","string"]},"attendees":{"items":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"organizer":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Organizer","default":false,"type":"boolean"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$id":"#yes_no_maybe","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"}},"$id":"#attendee","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendees","default":[],"type":"array"},"description":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Description","default":null,"type":["null","string"]},"location":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Location","default":null,"type":["null","string"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"task":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","default":null,"type":["null","string"]},"time":{"anyOf":[{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start_date"},"end_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End_date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_time":{"$id":"#time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start_time","type":"string"},"end_time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"End_time"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#event-time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Time","type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"}},"$id":"#event-creation","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ event: z
        .object({
          calendar: z.string().optional(),
          draft: z.boolean().optional(),
          archived: z.union([z.null(), z.string()]).default(null),
          attendance: z
            .union([z.null(), z.literal("attend"), z.literal("ignore")])
            .default(null),
          attendees: z
            .array(
              z
                .object({
                  email: z.string().optional(),
                  name: z.string().optional(),
                  organizer: z.boolean().default(false),
                  self: z.boolean().default(false),
                  status: z
                    .union([
                      z.literal("yes"),
                      z.literal("no"),
                      z.literal("maybe"),
                    ])
                    .optional(),
                })
                .strict()
            )
            .default([]),
          description: z.union([z.null(), z.string()]).default(null),
          location: z.union([z.null(), z.string()]).default(null),
          notes: z
            .object({
              blocks: z
                .array(
                  z.record(z.any()).and(
                    z.union([
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("blockquote").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("bullet").optional(),
                          list_type: z
                            .union([
                              z.literal("ordered"),
                              z.literal("unordered"),
                            ])
                            .optional(),
                          content: z.string().optional(),
                          depth: z.number().int().default(0),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("check").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("code").optional(),
                          language: z.string().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("callout").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("divider").optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("embed").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("heading").optional(),
                          content: z.string().optional(),
                          level: z.number().int().optional(),
                          retracted: z.boolean().default(false),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("paragraph").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("query").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("recurrent_task").optional(),
                          recurrent_task_id: z.string().optional(),
                          content: z.string().optional(),
                          recurrence: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    start: z
                                      .tuple([
                                        z.number().int(),
                                        z.number().int(),
                                        z.number().int(),
                                      ])
                                      .optional(),
                                    count: z.number().int().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    end: z.any().optional(),
                                    start: z.any().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("todo").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                          task: z.string().optional(),
                        })
                        .strict(),
                    ])
                  )
                )
                .optional(),
            })
            .strict()
            .default({ blocks: [] }),
          task: z.union([z.null(), z.string()]).default(null),
          time: z
            .record(z.any())
            .and(
              z.union([
                z.object({ date: z.any().optional() }).strict(),
                z
                  .object({
                    start_date: z.any().optional(),
                    end_date: z.any().optional(),
                  })
                  .strict(),
                z
                  .object({
                    start_time: z.string().optional(),
                    end_time: z.any().optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          title: z.string().optional(),
        })
        .strict(),
    },
    async ({ event }) => {
      try {
        const data = await sendRpcRequest("event.create", [event]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.create: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventDay",
    "The events on a given day.",
    {
      /*
{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ date: z.tuple([z.number().int(), z.number().int(), z.number().int()]),

      /*
{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"only-all-day","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"with-all-day","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"without-all-day","type":"string"}],"$id":"#all_day_filter","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ filter: z.union([
        z.literal("only-all-day"),
        z.literal("with-all-day"),
        z.literal("without-all-day"),
      ]),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ secondary: z.boolean(),
    },
    async ({ date, filter, secondary }) => {
      try {
        const data = await sendRpcRequest("event.day", [
          date,
          filter,
          secondary,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.day: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventDays",
    "The events on a given set of days.",
    {
      /*
{"items":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ dates: z.array(
        z.tuple([z.number().int(), z.number().int(), z.number().int()])
      ),

      /*
{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"only-all-day","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"with-all-day","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"without-all-day","type":"string"}],"$id":"#all_day_filter","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ filter: z.union([
        z.literal("only-all-day"),
        z.literal("with-all-day"),
        z.literal("without-all-day"),
      ]),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ secondary: z.boolean(),
    },
    async ({ dates, filter, secondary }) => {
      try {
        const data = await sendRpcRequest("event.days", [
          dates,
          filter,
          secondary,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.days: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventDelete",
    "Delete an event.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ send_updates: z.boolean(),
    },
    async ({ id, send_updates }) => {
      try {
        const data = await sendRpcRequest("event.delete", [id, send_updates]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.delete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventFindWithAttendees",
    "Events with the given attendees.",
    {
      /*
{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ emails: z.array(z.string()),
    },
    async ({ emails }) => {
      try {
        const data = await sendRpcRequest("event.find_with_attendees", [
          emails,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.find_with_attendees: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventGet",
    "An event.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventMove",
    "Move an event to another calendar.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"$id":"#calendar-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ dst_calendar_id: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ send_updates: z.boolean(),
    },
    async ({ id, dst_calendar_id, send_updates }) => {
      try {
        const data = await sendRpcRequest("event.move", [
          id,
          dst_calendar_id,
          send_updates,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.move: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventPublish",
    "Make a draft event definitive.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ send_updates: z.boolean(),
    },
    async ({ id, send_updates }) => {
      try {
        const data = await sendRpcRequest("event.publish", [id, send_updates]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.publish: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventRecurrentCreate",
    "Add a recurring event.",
    {
      /*
{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"draft":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Draft","type":"boolean"},"attendees":{"items":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"organizer":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Organizer","default":false,"type":"boolean"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$id":"#yes_no_maybe","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"}},"$id":"#attendee","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendees","default":[],"type":"array"},"daytime":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"date":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Date","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start_date"},"end_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End_date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_time":{"$id":"#time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start_time","type":"string"},"end_time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"End_time"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#event-recurrent-daytime-creation","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Daytime","default":null,"type":["null","object"]},"description":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Description","default":null,"type":["null","string"]},"exceptions":{"items":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":["array","null"]}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"},"$id":"#exceptions","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Exceptions","default":[],"type":"array"},"location":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Location","default":null,"type":["null","string"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#event_recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"}},"$id":"#event-recurrent-creation","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ event: z
        .object({
          calendar: z.string().optional(),
          draft: z.boolean().optional(),
          attendees: z
            .array(
              z
                .object({
                  email: z.string().optional(),
                  name: z.string().optional(),
                  organizer: z.boolean().default(false),
                  self: z.boolean().default(false),
                  status: z
                    .union([
                      z.literal("yes"),
                      z.literal("no"),
                      z.literal("maybe"),
                    ])
                    .optional(),
                })
                .strict()
            )
            .default([]),
          daytime: z
            .union([
              z.null(),
              z
                .object({
                  date: z
                    .tuple([
                      z.number().int(),
                      z.number().int(),
                      z.number().int(),
                    ])
                    .optional(),
                })
                .strict(),
              z
                .object({
                  start_date: z.any().optional(),
                  end_date: z.any().optional(),
                })
                .strict(),
              z
                .object({
                  start_time: z.string().optional(),
                  end_time: z.any().optional(),
                })
                .strict(),
            ])
            .default(null),
          description: z.union([z.null(), z.string()]).default(null),
          exceptions: z
            .array(
              z.tuple([
                z.any(),
                z.union([
                  z.tuple([
                    z.number().int(),
                    z.number().int(),
                    z.number().int(),
                  ]),
                  z.null(),
                ]),
              ])
            )
            .default([]),
          location: z.union([z.null(), z.string()]).default(null),
          notes: z
            .object({
              blocks: z
                .array(
                  z.record(z.any()).and(
                    z.union([
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("blockquote").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("bullet").optional(),
                          list_type: z
                            .union([
                              z.literal("ordered"),
                              z.literal("unordered"),
                            ])
                            .optional(),
                          content: z.string().optional(),
                          depth: z.number().int().default(0),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("check").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("code").optional(),
                          language: z.string().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("callout").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("divider").optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("embed").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("heading").optional(),
                          content: z.string().optional(),
                          level: z.number().int().optional(),
                          retracted: z.boolean().default(false),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("paragraph").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("query").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("recurrent_task").optional(),
                          recurrent_task_id: z.string().optional(),
                          content: z.string().optional(),
                          recurrence: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    start: z.any().optional(),
                                    count: z.number().int().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    end: z.any().optional(),
                                    start: z.any().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("todo").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                          task: z.string().optional(),
                        })
                        .strict(),
                    ])
                  )
                )
                .optional(),
            })
            .strict()
            .default({ blocks: [] }),
          recurrence: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    start: z.any().optional(),
                    count: z.number().int().optional(),
                    rule: z.any().optional(),
                  })
                  .strict(),
                z
                  .object({
                    end: z.any().optional(),
                    start: z.any().optional(),
                    rule: z.any().optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          title: z.string().optional(),
        })
        .strict(),
    },
    async ({ event }) => {
      try {
        const data = await sendRpcRequest("event.recurrent.create", [event]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.recurrent.create: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventRecurrentDelete",
    "Delete a recurrent event.",
    {
      /*
{"$id":"#event-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.recurrent.delete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.recurrent.delete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventRecurrentGet",
    "Get a recurring event.",
    {
      /*
{"$id":"#event-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.recurrent.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.recurrent.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventRecurrentStop",
    "Set a recurring event end date to today.",
    {
      /*
{"$id":"#event-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ date: z.tuple([z.number().int(), z.number().int(), z.number().int()]),
    },
    async ({ id, date }) => {
      try {
        const data = await sendRpcRequest("event.recurrent.stop", [id, date]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.recurrent.stop: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventRecurrentUpdate",
    "Update a recurring event.",
    {
      /*
{"additionalProperties":false,"properties":{"id":{"$id":"#event-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"attendees":{"items":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"organizer":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Organizer","default":false,"type":"boolean"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$id":"#yes_no_maybe","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"}},"$id":"#attendee","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendees","default":null,"type":["array","null"]},"daytime":{"additionalProperties":false,"properties":{"time_range":{"anyOf":[{"additionalProperties":false,"properties":{"date":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Date","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start_date"},"end_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End_date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_time":{"$id":"#time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start_time","type":"string"},"end_time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"End_time"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#event-time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Time_range","type":"object"},"timezone":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Timezone","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Daytime","default":null,"type":["null","object"]},"description":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Description","default":null,"type":["null","string"]},"exceptions":{"items":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":["array","null"]}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Exceptions","default":null,"type":["array","null"]},"location":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Location","default":null,"type":["null","string"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":null,"type":["null","object"]},"recurrence":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","default":null,"type":["null","object"]},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","default":null,"type":["null","string"]}},"$id":"#event-recurrent-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          id: z.string().optional(),
          attendees: z
            .union([
              z.array(
                z
                  .object({
                    email: z.string().optional(),
                    name: z.string().optional(),
                    organizer: z.boolean(),
                    self: z.boolean(),
                    status: z
                      .union([
                        z.literal("yes"),
                        z.literal("no"),
                        z.literal("maybe"),
                      ])
                      .optional(),
                  })
                  .strict()
              ),
              z.null(),
            ])
            .default(null),
          daytime: z
            .union([
              z.null(),
              z
                .object({
                  time_range: z
                    .record(z.any())
                    .and(
                      z.union([
                        z
                          .object({
                            date: z
                              .tuple([
                                z.number().int(),
                                z.number().int(),
                                z.number().int(),
                              ])
                              .optional(),
                          })
                          .strict(),
                        z
                          .object({
                            start_date: z.any().optional(),
                            end_date: z.any().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            start_time: z.string().optional(),
                            end_time: z.any().optional(),
                          })
                          .strict(),
                      ])
                    )
                    .optional(),
                  timezone: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          description: z.union([z.null(), z.string()]).default(null),
          exceptions: z
            .union([
              z.array(
                z.tuple([
                  z.any(),
                  z.union([
                    z.tuple([
                      z.number().int(),
                      z.number().int(),
                      z.number().int(),
                    ]),
                    z.null(),
                  ]),
                ])
              ),
              z.null(),
            ])
            .default(null),
          location: z.union([z.null(), z.string()]).default(null),
          notes: z
            .union([
              z.null(),
              z
                .object({
                  blocks: z
                    .array(
                      z.record(z.any()).and(
                        z.union([
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("blockquote").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("bullet").optional(),
                              list_type: z
                                .union([
                                  z.literal("ordered"),
                                  z.literal("unordered"),
                                ])
                                .optional(),
                              content: z.string().optional(),
                              depth: z.number().int(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("check").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("code").optional(),
                              language: z.string().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("callout").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("divider").optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("embed").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("heading").optional(),
                              content: z.string().optional(),
                              level: z.number().int().optional(),
                              retracted: z.boolean(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("paragraph").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("query").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("recurrent_task").optional(),
                              recurrent_task_id: z.string().optional(),
                              content: z.string().optional(),
                              recurrence: z
                                .record(z.any())
                                .and(
                                  z.union([
                                    z
                                      .object({
                                        start: z.any().optional(),
                                        count: z.number().int().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        end: z.any().optional(),
                                        start: z.any().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("todo").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                              task: z.string().optional(),
                            })
                            .strict(),
                        ])
                      )
                    )
                    .optional(),
                })
                .strict(),
            ])
            .default(null),
          recurrence: z.union([z.null(), z.any(), z.any()]).default(null),
          title: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),
    },
    async ({ patch }) => {
      try {
        const data = await sendRpcRequest("event.recurrent.update", [patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.recurrent.update: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventRecurrentFirstOccurrence",
    "Get the first occurrence of a recurring event",
    {
      /*
{"$id":"#event-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.recurrent.first_occurrence", [
          id,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error(
          "Error fetching event.recurrent.first_occurrence: %o",
          error
        );
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventSetWillAttend",
    "Patch an event's attendance.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]}
*/ will_attend: z.union([
        z.null(),
        z.literal("yes"),
        z.literal("no"),
        z.literal("maybe"),
      ]),
    },
    async ({ id, will_attend }) => {
      try {
        const data = await sendRpcRequest("event.set_will_attend", [
          id,
          will_attend,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.set_will_attend: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventTasks",
    "Tasks inside an event notes",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.tasks", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.tasks: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventTimeline",
    "Agenda view for a day.",
    {
      /*
{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ date: z.tuple([z.number().int(), z.number().int(), z.number().int()]),
    },
    async ({ date }) => {
      try {
        const data = await sendRpcRequest("event.timeline", [date]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.timeline: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventUpdate",
    "Patch an event.",
    {
      /*
{"additionalProperties":false,"properties":{"id":{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"archived":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Archived","default":null,"type":["null","string"]},"attendance":{"anyOf":[{"type":"null"},{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"attend","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ignore","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendance","default":null,"type":["null","string"]},"attendees":{"items":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"organizer":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Organizer","default":false,"type":"boolean"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$id":"#yes_no_maybe","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"}},"$id":"#attendee","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendees","default":null,"type":["array","null"]},"description":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Description","default":null,"type":["null","string"]},"location":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Location","default":null,"type":["null","string"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":null,"type":["null","object"]},"task":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","default":null,"type":["null","string"]},"time":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start_date"},"end_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End_date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_time":{"$id":"#time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start_time","type":"string"},"end_time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"End_time"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Time","default":null,"type":["null","object"]},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","default":null,"type":["null","string"]}},"$id":"#event-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          id: z.string().optional(),
          archived: z.union([z.null(), z.string()]).default(null),
          attendance: z
            .union([
              z.null(),
              z.null(),
              z.literal("attend"),
              z.literal("ignore"),
            ])
            .default(null),
          attendees: z
            .union([
              z.array(
                z
                  .object({
                    email: z.string().optional(),
                    name: z.string().optional(),
                    organizer: z.boolean(),
                    self: z.boolean(),
                    status: z
                      .union([
                        z.literal("yes"),
                        z.literal("no"),
                        z.literal("maybe"),
                      ])
                      .optional(),
                  })
                  .strict()
              ),
              z.null(),
            ])
            .default(null),
          description: z.union([z.null(), z.string()]).default(null),
          location: z.union([z.null(), z.string()]).default(null),
          notes: z
            .union([
              z.null(),
              z
                .object({
                  blocks: z
                    .array(
                      z.record(z.any()).and(
                        z.union([
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("blockquote").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("bullet").optional(),
                              list_type: z
                                .union([
                                  z.literal("ordered"),
                                  z.literal("unordered"),
                                ])
                                .optional(),
                              content: z.string().optional(),
                              depth: z.number().int(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("check").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("code").optional(),
                              language: z.string().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("callout").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("divider").optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("embed").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("heading").optional(),
                              content: z.string().optional(),
                              level: z.number().int().optional(),
                              retracted: z.boolean(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("paragraph").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("query").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("recurrent_task").optional(),
                              recurrent_task_id: z.string().optional(),
                              content: z.string().optional(),
                              recurrence: z
                                .record(z.any())
                                .and(
                                  z.union([
                                    z
                                      .object({
                                        start: z
                                          .tuple([
                                            z.number().int(),
                                            z.number().int(),
                                            z.number().int(),
                                          ])
                                          .optional(),
                                        count: z.number().int().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        end: z.any().optional(),
                                        start: z.any().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("todo").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                              task: z.string().optional(),
                            })
                            .strict(),
                        ])
                      )
                    )
                    .optional(),
                })
                .strict(),
            ])
            .default(null),
          task: z.union([z.null(), z.string()]).default(null),
          time: z
            .union([
              z.null(),
              z.object({ date: z.any().optional() }).strict(),
              z
                .object({
                  start_date: z.any().optional(),
                  end_date: z.any().optional(),
                })
                .strict(),
              z
                .object({
                  start_time: z.string().optional(),
                  end_time: z.any().optional(),
                })
                .strict(),
            ])
            .default(null),
          title: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ send_updates: z.boolean(),
    },
    async ({ patch, send_updates }) => {
      try {
        const data = await sendRpcRequest("event.update", [
          patch,
          send_updates,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.update: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventWithNotes",
    "Events with note in antechronological order.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("event.with_notes", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.with_notes: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventWithSameAttendees",
    "Events with the same set of attendees as the given event.",
    {
      /*
{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("event.with_same_attendees", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.with_same_attendees: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "eventAlignSelfAttendee",
    "Update the `self` attendee in the given attendee list to match the owner of the given calendar.",
    {
      /*
{"$id":"#calendar-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ owner: z.string(),

      /*
{"items":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"organizer":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Organizer","default":false,"type":"boolean"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$id":"#yes_no_maybe","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"}},"$id":"#attendee","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ attendees: z.array(
        z
          .object({
            email: z.string().optional(),
            name: z.string().optional(),
            organizer: z.boolean().default(false),
            self: z.boolean().default(false),
            status: z
              .union([z.literal("yes"), z.literal("no"), z.literal("maybe")])
              .optional(),
          })
          .strict()
      ),
    },
    async ({ owner, attendees }) => {
      try {
        const data = await sendRpcRequest("event.align_self_attendee", [
          owner,
          attendees,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching event.align_self_attendee: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphDatabaseAdd",
    "Add a database.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ type_name: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ database_name: z.string(),

      /*
{"additionalProperties":false,"properties":{"emoji":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Emoji","type":"string"},"color":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#color","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Color","type":"array"}},"$id":"#database-metadata","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ meta: z
        .object({
          emoji: z.string().optional(),
          color: z
            .tuple([z.number().int(), z.number().int(), z.number().int()])
            .optional(),
        })
        .strict(),

      /*
{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"bool","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"int","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"list","type":"string"},"elements":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#graph-custom-type","title":"Elements"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"null","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"record","type":"string"},"fields":{"additionalProperties":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#graph-custom-type"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Fields","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"relation","type":"string"},"database":{"$id":"#database-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Database","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"string","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"string_const","type":"string"},"value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Value","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"variant","type":"string"},"cases":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#graph-custom-type"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Cases","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#graph-custom-type","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ type: z
        .record(z.any())
        .and(
          z.union([
            z.object({ type: z.literal("bool").optional() }).strict(),
            z.object({ type: z.literal("int").optional() }).strict(),
            z
              .object({
                type: z.literal("list").optional(),
                elements: z.any().optional(),
              })
              .strict(),
            z.object({ type: z.literal("null").optional() }).strict(),
            z
              .object({
                type: z.literal("record").optional(),
                fields: z.record(z.any()).optional(),
              })
              .strict(),
            z
              .object({
                type: z.literal("relation").optional(),
                database: z.string().optional(),
              })
              .strict(),
            z.object({ type: z.literal("string").optional() }).strict(),
            z
              .object({
                type: z.literal("string_const").optional(),
                value: z.string().optional(),
              })
              .strict(),
            z
              .object({
                type: z.literal("variant").optional(),
                cases: z.array(z.any()).optional(),
              })
              .strict(),
          ])
        ),
    },
    async ({ type_name, database_name, meta, type }) => {
      try {
        const data = await sendRpcRequest("graph.database.add", [
          type_name,
          database_name,
          meta,
          type,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.database.add: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphCommandCompile",
    "Compile graph command.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ command: z.string(),
    },
    async ({ command }) => {
      try {
        const data = await sendRpcRequest("graph.command.compile", [command]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.command.compile: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphCommandRun",
    "Run graph command.",
    {
      /*
{"$id":"#graph-command","$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}
*/ command: z.number().int(),
    },
    async ({ command }) => {
      try {
        const data = await sendRpcRequest("graph.command.run", [command]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.command.run: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphLoad",
    "Load definitions.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ definitions: z.string(),
    },
    async ({ definitions }) => {
      try {
        const data = await sendRpcRequest("graph.load", [definitions]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.load: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphQueryCompile",
    "Compile graph query.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ query: z.string(),

      /*
{"additionalProperties":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"date","type":"string"},"value":{"additionalProperties":false,"properties":{"channel":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#channel_id"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#channel_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Channel","type":["array","integer"]},"init":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Init","type":"array"}},"$id":"#var","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Value","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"string","type":"string"},"value":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#var","title":"Value"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#graph-variable","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$id":"#graph-variable-dictionary","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ variables: z.record(
        z.record(z.any()).and(
          z.union([
            z
              .object({
                type: z.literal("date").optional(),
                value: z
                  .object({
                    channel: z
                      .union([
                        z.number().int(),
                        z.tuple([z.number().int(), z.any()]),
                      ])
                      .optional(),
                    init: z
                      .tuple([
                        z.number().int(),
                        z.number().int(),
                        z.number().int(),
                      ])
                      .optional(),
                  })
                  .strict()
                  .optional(),
              })
              .strict(),
            z
              .object({
                type: z.literal("string").optional(),
                value: z.any().optional(),
              })
              .strict(),
          ])
        )
      ),
    },
    async ({ query, variables }) => {
      try {
        const data = await sendRpcRequest("graph.query.compile", [
          query,
          variables,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.query.compile: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphQueryRun",
    "Run graph query.",
    {
      /*
{"$id":"#graph-query","$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}
*/ query: z.number().int(),
    },
    async ({ query }) => {
      try {
        const data = await sendRpcRequest("graph.query.run", [query]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.query.run: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "graphQueryType",
    "Result type of a graph query.",
    {
      /*
{"$id":"#graph-query","$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}
*/ query: z.number().int(),
    },
    async ({ query }) => {
      try {
        const data = await sendRpcRequest("graph.query.type", [query]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching graph.query.type: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "integrationAdd",
    "Add integration.",
    {
      /*
{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"google","type":"string"},"accounts":{"additionalProperties":{"additionalProperties":false,"properties":{"directory_enabled":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Directory_enabled","type":"boolean"}},"$id":"#google-config-account","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$id":"#google-config-account-dictionary","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Accounts","type":"object"}},"$id":"#google-config","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"notion","type":"string"},"self":{"$id":"#uuid","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","type":"string"},"secret":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Secret","type":"string"},"imports":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#integration-import-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"assigneeColumnId":{"$id":"#property_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"AssigneeColumnId","type":"string"},"assigneeId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"AssigneeId"},"databaseId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"DatabaseId"},"databaseName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"DatabaseName","default":"","type":"string"},"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":"","type":"string"},"completedStatusId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusId","type":"string"},"activeStatusId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ActiveStatusId","default":null,"type":["null","string"]},"completedStatusEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusEquivalentIds","default":[],"type":"array"},"ignoredStatusEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"IgnoredStatusEquivalentIds","default":[],"type":"array"},"scheduleColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ScheduleColumnId","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#integration-import-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"assigneeColumnId":{"$id":"#property_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"AssigneeColumnId","type":"string"},"assigneeId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"AssigneeId"},"databaseId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"DatabaseId"},"databaseName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"DatabaseName","default":"","type":"string"},"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":"","type":"string"},"completedStatusPropertyId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusPropertyId","type":"string"},"activeStatusPropertyId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ActiveStatusPropertyId","type":"string"},"completedStatusPropertyEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusPropertyEquivalentIds","default":[],"type":"array"},"ignoredStatusPropertyEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"IgnoredStatusPropertyEquivalentIds","default":[],"type":"array"},"scheduleColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ScheduleColumnId","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#integration-import-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"assigneeColumnId":{"$id":"#property_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"AssigneeColumnId","type":"string"},"assigneeId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"AssigneeId"},"databaseId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"DatabaseId"},"databaseName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"DatabaseName","default":"","type":"string"},"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":"","type":"string"},"scheduleColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ScheduleColumnId","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#notion-import","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Imports","type":"array"},"people":{"items":{"additionalProperties":false,"properties":{"avatar_url":{"$id":"#uri","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Avatar_url","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"Id"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"}},"$id":"#notion-people","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"People","type":"array"},"databases":{"items":{"additionalProperties":false,"properties":{"id":{"$id":"#t","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"peopleColumns":{"items":{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"Id"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"value":{"title":"Value","type":"null"}},"$id":"#notion-column","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"PeopleColumns","type":"array"},"statusColumns":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"statusColumnName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumnName","type":"string"},"options":{"items":{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$id":"#notion-select-option","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Options","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"statusColumnName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumnName","type":"string"},"status":{"items":{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"group":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"todo","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"in_progress","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"completed","type":"string"}],"$id":"#notion-status-group","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Group","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$id":"#notion-status-option","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"statusColumnName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumnName","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#notion-status-column","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumns","type":"array"}},"$id":"#notion-database","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Databases","type":"array"},"status":{"anyOf":[{"additionalProperties":false,"properties":{"status":{"const":"ready","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"status":{"const":"synchronizing","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"status":{"const":"broken","type":"string"},"errorType":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"backend","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"configuration","type":"string"}],"$id":"#integration-report-broken-cause","$schema":"https://json-schema.org/draft/2019-09/schema","title":"ErrorType","type":"string"},"error":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Error","type":"string"},"details":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Details","type":"string"}},"$id":"#integration-report","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#integration-report-integration-status","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"object"}},"$id":"#integration-report-notion-config","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#integration-report-integration-config","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ config: z.record(z.any()).and(
        z.union([
          z
            .object({
              type: z.literal("google").optional(),
              accounts: z
                .record(
                  z
                    .object({ directory_enabled: z.boolean().optional() })
                    .strict()
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              type: z.literal("notion").optional(),
              self: z.string().optional(),
              secret: z.string().optional(),
              imports: z
                .array(
                  z
                    .record(z.any())
                    .and(
                      z.union([
                        z
                          .object({
                            id: z.string().optional(),
                            assigneeColumnId: z.string().optional(),
                            assigneeId: z.any().optional(),
                            databaseId: z.any().optional(),
                            databaseName: z.string().default(""),
                            statusColumnId: z.any().optional(),
                            name: z.string().default(""),
                            completedStatusId: z.string().optional(),
                            activeStatusId: z
                              .union([z.null(), z.string()])
                              .default(null),
                            completedStatusEquivalentIds: z
                              .array(z.union([z.null(), z.string()]))
                              .default([]),
                            ignoredStatusEquivalentIds: z
                              .array(z.union([z.null(), z.string()]))
                              .default([]),
                            scheduleColumnId: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            assigneeColumnId: z.string().optional(),
                            assigneeId: z.any().optional(),
                            databaseId: z.any().optional(),
                            databaseName: z.string().default(""),
                            statusColumnId: z.any().optional(),
                            name: z.string().default(""),
                            completedStatusPropertyId: z.string().optional(),
                            activeStatusPropertyId: z.string().optional(),
                            completedStatusPropertyEquivalentIds: z
                              .array(z.string())
                              .default([]),
                            ignoredStatusPropertyEquivalentIds: z
                              .array(z.string())
                              .default([]),
                            scheduleColumnId: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            assigneeColumnId: z.string().optional(),
                            assigneeId: z.any().optional(),
                            databaseId: z.any().optional(),
                            databaseName: z.string().default(""),
                            statusColumnId: z.any().optional(),
                            name: z.string().default(""),
                            scheduleColumnId: z.string().optional(),
                          })
                          .strict(),
                      ])
                    )
                )
                .optional(),
              people: z
                .array(
                  z
                    .object({
                      avatar_url: z.string().optional(),
                      id: z.any().optional(),
                      name: z.string().optional(),
                      email: z.string().optional(),
                    })
                    .strict()
                )
                .optional(),
              databases: z
                .array(
                  z
                    .object({
                      id: z.string().optional(),
                      title: z.string().optional(),
                      peopleColumns: z
                        .array(
                          z
                            .object({
                              id: z.any().optional(),
                              name: z.string().optional(),
                              value: z.null().optional(),
                            })
                            .strict()
                        )
                        .optional(),
                      statusColumns: z
                        .array(
                          z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    statusColumnId: z.any().optional(),
                                    statusColumnName: z.string().optional(),
                                    options: z
                                      .array(
                                        z
                                          .object({
                                            id: z.string().optional(),
                                            name: z.string().optional(),
                                          })
                                          .strict()
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    statusColumnId: z.any().optional(),
                                    statusColumnName: z.string().optional(),
                                    status: z
                                      .array(
                                        z
                                          .object({
                                            id: z.string().optional(),
                                            group: z
                                              .union([
                                                z.literal("todo"),
                                                z.literal("in_progress"),
                                                z.literal("completed"),
                                              ])
                                              .optional(),
                                            name: z.string().optional(),
                                          })
                                          .strict()
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    statusColumnId: z.any().optional(),
                                    statusColumnName: z.string().optional(),
                                  })
                                  .strict(),
                              ])
                            )
                        )
                        .optional(),
                    })
                    .strict()
                )
                .optional(),
              status: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({ status: z.literal("ready").optional() })
                      .strict(),
                    z
                      .object({ status: z.literal("synchronizing").optional() })
                      .strict(),
                    z
                      .object({
                        status: z.literal("broken").optional(),
                        errorType: z
                          .union([
                            z.literal("backend"),
                            z.literal("configuration"),
                          ])
                          .optional(),
                        error: z.string().optional(),
                        details: z.string().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
        ])
      ),
    },
    async ({ config }) => {
      try {
        const data = await sendRpcRequest("integration.add", [config]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching integration.add: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "integrationGet",
    "An integration.",
    {
      /*
{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("integration.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching integration.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("integrationList", "All integrations.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("integration.list", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching integration.list: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "integrationRefresh",
    "Refresh integration.",
    {
      /*
{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("integration.refresh", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching integration.refresh: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "integrationRemove",
    "Remove integration.",
    {
      /*
{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("integration.remove", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching integration.remove: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "integrationUpdate",
    "Update integration.",
    {
      /*
{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"google","type":"string"},"accounts":{"additionalProperties":{"additionalProperties":false,"properties":{"directory_enabled":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Directory_enabled","type":"boolean"}},"$id":"#google-config-account","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$id":"#google-config-account-dictionary","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Accounts","type":"object"}},"$id":"#google-config","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"notion","type":"string"},"self":{"$id":"#uuid","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","type":"string"},"secret":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Secret","type":"string"},"imports":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#integration-import-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"assigneeColumnId":{"$id":"#property_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"AssigneeColumnId","type":"string"},"assigneeId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"AssigneeId"},"databaseId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"DatabaseId"},"databaseName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"DatabaseName","default":"","type":"string"},"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":"","type":"string"},"completedStatusId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusId","type":"string"},"activeStatusId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ActiveStatusId","default":null,"type":["null","string"]},"completedStatusEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusEquivalentIds","default":[],"type":"array"},"ignoredStatusEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"IgnoredStatusEquivalentIds","default":[],"type":"array"},"scheduleColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ScheduleColumnId","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#integration-import-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"assigneeColumnId":{"$id":"#property_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"AssigneeColumnId","type":"string"},"assigneeId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"AssigneeId"},"databaseId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"DatabaseId"},"databaseName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"DatabaseName","default":"","type":"string"},"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":"","type":"string"},"completedStatusPropertyId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusPropertyId","type":"string"},"activeStatusPropertyId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ActiveStatusPropertyId","type":"string"},"completedStatusPropertyEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CompletedStatusPropertyEquivalentIds","default":[],"type":"array"},"ignoredStatusPropertyEquivalentIds":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"IgnoredStatusPropertyEquivalentIds","default":[],"type":"array"},"scheduleColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ScheduleColumnId","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#integration-import-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"assigneeColumnId":{"$id":"#property_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"AssigneeColumnId","type":"string"},"assigneeId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"AssigneeId"},"databaseId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"DatabaseId"},"databaseName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"DatabaseName","default":"","type":"string"},"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","default":"","type":"string"},"scheduleColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"ScheduleColumnId","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#notion-import","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Imports","type":"array"},"people":{"items":{"additionalProperties":false,"properties":{"avatar_url":{"$id":"#uri","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Avatar_url","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uuid","title":"Id"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"}},"$id":"#notion-people","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"People","type":"array"},"databases":{"items":{"additionalProperties":false,"properties":{"id":{"$id":"#t","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"peopleColumns":{"items":{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"Id"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"value":{"title":"Value","type":"null"}},"$id":"#notion-column","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"PeopleColumns","type":"array"},"statusColumns":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"statusColumnName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumnName","type":"string"},"options":{"items":{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$id":"#notion-select-option","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Options","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"statusColumnName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumnName","type":"string"},"status":{"items":{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"group":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"todo","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"in_progress","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"completed","type":"string"}],"$id":"#notion-status-group","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Group","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$id":"#notion-status-option","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"statusColumnId":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#property_id","title":"StatusColumnId"},"statusColumnName":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumnName","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#notion-status-column","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"StatusColumns","type":"array"}},"$id":"#notion-database","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Databases","type":"array"},"status":{"anyOf":[{"additionalProperties":false,"properties":{"status":{"const":"ready","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"status":{"const":"synchronizing","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"status":{"const":"broken","type":"string"},"errorType":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"backend","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"configuration","type":"string"}],"$id":"#integration-report-broken-cause","$schema":"https://json-schema.org/draft/2019-09/schema","title":"ErrorType","type":"string"},"error":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Error","type":"string"},"details":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Details","type":"string"}},"$id":"#integration-report","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#integration-report-integration-status","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"object"}},"$id":"#integration-report-notion-config","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#integration-report-integration-config","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ config: z.record(z.any()).and(
        z.union([
          z
            .object({
              type: z.literal("google").optional(),
              accounts: z
                .record(
                  z
                    .object({ directory_enabled: z.boolean().optional() })
                    .strict()
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              type: z.literal("notion").optional(),
              self: z.string().optional(),
              secret: z.string().optional(),
              imports: z
                .array(
                  z
                    .record(z.any())
                    .and(
                      z.union([
                        z
                          .object({
                            id: z.string().optional(),
                            assigneeColumnId: z.string().optional(),
                            assigneeId: z.any().optional(),
                            databaseId: z.any().optional(),
                            databaseName: z.string().default(""),
                            statusColumnId: z.any().optional(),
                            name: z.string().default(""),
                            completedStatusId: z.string().optional(),
                            activeStatusId: z
                              .union([z.null(), z.string()])
                              .default(null),
                            completedStatusEquivalentIds: z
                              .array(z.union([z.null(), z.string()]))
                              .default([]),
                            ignoredStatusEquivalentIds: z
                              .array(z.union([z.null(), z.string()]))
                              .default([]),
                            scheduleColumnId: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            assigneeColumnId: z.string().optional(),
                            assigneeId: z.any().optional(),
                            databaseId: z.any().optional(),
                            databaseName: z.string().default(""),
                            statusColumnId: z.any().optional(),
                            name: z.string().default(""),
                            completedStatusPropertyId: z.string().optional(),
                            activeStatusPropertyId: z.string().optional(),
                            completedStatusPropertyEquivalentIds: z
                              .array(z.string())
                              .default([]),
                            ignoredStatusPropertyEquivalentIds: z
                              .array(z.string())
                              .default([]),
                            scheduleColumnId: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            assigneeColumnId: z.string().optional(),
                            assigneeId: z.any().optional(),
                            databaseId: z.any().optional(),
                            databaseName: z.string().default(""),
                            statusColumnId: z.any().optional(),
                            name: z.string().default(""),
                            scheduleColumnId: z.string().optional(),
                          })
                          .strict(),
                      ])
                    )
                )
                .optional(),
              people: z
                .array(
                  z
                    .object({
                      avatar_url: z.string().optional(),
                      id: z.any().optional(),
                      name: z.string().optional(),
                      email: z.string().optional(),
                    })
                    .strict()
                )
                .optional(),
              databases: z
                .array(
                  z
                    .object({
                      id: z.string().optional(),
                      title: z.string().optional(),
                      peopleColumns: z
                        .array(
                          z
                            .object({
                              id: z.any().optional(),
                              name: z.string().optional(),
                              value: z.null().optional(),
                            })
                            .strict()
                        )
                        .optional(),
                      statusColumns: z
                        .array(
                          z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    statusColumnId: z.any().optional(),
                                    statusColumnName: z.string().optional(),
                                    options: z
                                      .array(
                                        z
                                          .object({
                                            id: z.string().optional(),
                                            name: z.string().optional(),
                                          })
                                          .strict()
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    statusColumnId: z.any().optional(),
                                    statusColumnName: z.string().optional(),
                                    status: z
                                      .array(
                                        z
                                          .object({
                                            id: z.string().optional(),
                                            group: z
                                              .union([
                                                z.literal("todo"),
                                                z.literal("in_progress"),
                                                z.literal("completed"),
                                              ])
                                              .optional(),
                                            name: z.string().optional(),
                                          })
                                          .strict()
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    statusColumnId: z.any().optional(),
                                    statusColumnName: z.string().optional(),
                                  })
                                  .strict(),
                              ])
                            )
                        )
                        .optional(),
                    })
                    .strict()
                )
                .optional(),
              status: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({ status: z.literal("ready").optional() })
                      .strict(),
                    z
                      .object({ status: z.literal("synchronizing").optional() })
                      .strict(),
                    z
                      .object({
                        status: z.literal("broken").optional(),
                        errorType: z
                          .union([
                            z.literal("backend"),
                            z.literal("configuration"),
                          ])
                          .optional(),
                        error: z.string().optional(),
                        details: z.string().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
        ])
      ),
    },
    async ({ id, config }) => {
      try {
        const data = await sendRpcRequest("integration.update", [id, config]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching integration.update: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "integrationNotionExchangeToken",
    "Create Notion integration from retrieved token.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ code: z.string(),
    },
    async ({ code }) => {
      try {
        const data = await sendRpcRequest("integration.notion.exchange_token", [
          code,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error(
          "Error fetching integration.notion.exchange_token: %o",
          error
        );
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "integrationNotionGenerateImportId",
    "Generate an integration import ID.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest(
          "integration.notion.generate_import_id",
          []
        );
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error(
          "Error fetching integration.notion.generate_import_id: %o",
          error
        );
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("mandateConfig", "Mandate configuration.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("mandate.config", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching mandate.config: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "mandateMakeParser",
    "Create a parser for the given feature set.",
    {
      /*
{"additionalProperties":false,"properties":{"participants":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Participants","default":true,"type":"boolean"},"postponing":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Postponing","default":true,"type":"boolean"},"recurrence":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","default":true,"type":"boolean"},"redirection":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Redirection","default":true,"type":"boolean"},"scheduling":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Scheduling","default":true,"type":"boolean"},"slots":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Slots","default":true,"type":"boolean"}},"$id":"#features","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ features: z
        .object({
          participants: z.boolean().default(true),
          postponing: z.boolean().default(true),
          recurrence: z.boolean().default(true),
          redirection: z.boolean().default(true),
          scheduling: z.boolean().default(true),
          slots: z.boolean().default(true),
        })
        .strict(),
    },
    async ({ features }) => {
      try {
        const data = await sendRpcRequest("mandate.make_parser", [features]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching mandate.make_parser: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "mandateParse",
    "Analyze a phrase with Mandate.",
    {
      /*
{"additionalProperties":false,"properties":{"parser":{"$id":"#mandate-parser","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parser","type":"integer"}},"$id":"#mandate-parser-wrapper","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ parser: z.object({ parser: z.number().int().optional() }).strict(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}
*/ locked: z.number().int(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ phrase: z.string(),
    },
    async ({ parser, locked, phrase }) => {
      try {
        const data = await sendRpcRequest("mandate.parse", [
          parser,
          locked,
          phrase,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching mandate.parse: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "notificationsErr",
    "Send error notification message.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ message: z.string(),
    },
    async ({ message }) => {
      try {
        const data = await sendRpcRequest("notifications.err", [message]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching notifications.err: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "notificationsNotifications",
    "System notifications.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("notifications.notifications", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching notifications.notifications: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "notificationsNotify",
    "Send informational notification message.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ message: z.string(),
    },
    async ({ message }) => {
      try {
        const data = await sendRpcRequest("notifications.notify", [message]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching notifications.notify: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "notificationsNotifyRich",
    "Send notification.",
    {
      /*
{"additionalProperties":false,"properties":{"message":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"event":{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"calendar_status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"confirmed","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tentative","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"cancelled","type":"string"}],"$id":"#calendar_status","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar_status","type":"string"},"creator":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"}},"$id":"#event-creator","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Creator","type":"object"},"draft":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Draft","type":"boolean"},"google_event_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Google_event_id","type":"string"},"id":{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"link":{"additionalProperties":false,"properties":{"url":{"$id":"#uri","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","type":"string"},"type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"discord","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"meet","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"teams","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"whereby","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"zoom","type":"string"}],"$id":"#link_type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","type":"string"}},"$id":"#link","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Link","type":"object"},"slot":{"additionalProperties":false,"properties":{"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"focus","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"meetings","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"processing","type":"string"}],"$id":"#slot-kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"}},"$id":"#slot-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Slot","type":"object"},"archived":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Archived","default":null,"type":["null","string"]},"attendance":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"attend","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ignore","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendance","default":null,"type":["null","string"]},"attendees":{"items":{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"organizer":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Organizer","default":false,"type":"boolean"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Self","default":false,"type":"boolean"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"yes","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"no","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"maybe","type":"string"}],"$id":"#yes_no_maybe","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"}},"$id":"#attendee","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendees","default":[],"type":"array"},"description":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Description","default":null,"type":["null","string"]},"location":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Location","default":null,"type":["null","string"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"task":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","default":null,"type":["null","string"]},"time":{"anyOf":[{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start_date"},"end_date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End_date"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"start_time":{"$id":"#time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start_time","type":"string"},"end_time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"End_time"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#event-time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Time","type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"allDay":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"AllDay","type":"boolean"},"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"End"},"isArchived":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"IsArchived","type":"boolean"},"role":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"active","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"passive","type":"string"}],"$id":"#event-role","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Role","type":"string"},"self":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#attendee","title":"Self"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Start"},"willAttend":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#yes_no_maybe","title":"WillAttend"}},"$id":"#event","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Event","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"event":{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"creator":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#event-creator","title":"Creator"},"draft":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Draft","type":"boolean"},"google_event_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Google_event_id","type":"string"},"id":{"$id":"#event-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"link":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#link","title":"Link"},"attendees":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#attendee"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Attendees","default":[],"type":"array"},"daytime":{"additionalProperties":false,"properties":{"time":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$id":"#daytime","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Time","type":"object"},"duration":{"$id":"#span","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Duration","type":"integer"},"timezone":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Timezone","type":"string"}},"$id":"#event-recurrent-daytime-read","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Daytime","default":null,"type":["null","object"]},"description":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Description","default":null,"type":["null","string"]},"exceptions":{"items":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":["array","null"]}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"},"$id":"#exceptions","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Exceptions","default":[],"type":"array"},"location":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Location","default":null,"type":["null","string"]},"notes":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#document","title":"Notes","default":{"blocks":[]}},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#event_recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"}},"$id":"#event-recurrent","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Event","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"highlight":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Highlight","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"uri":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#uri","title":"Uri"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"page":{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Page","type":"string"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"people":{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"People","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"task":{"additionalProperties":false,"properties":{"allocations":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#event-id"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Allocations","default":[],"type":"array"},"client":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Client","default":null,"type":["null","string"]},"created":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Created"},"deleted":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Deleted"},"etag":{"additionalProperties":false,"properties":{"time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Time"},"version":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Version","type":"integer"}},"$id":"#etag_intf","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Etag","type":"object"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-id","title":"Id"},"ignored":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Ignored","default":null,"type":["null","string"]},"completed":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Completed","default":null,"type":["null","string"]},"integration_id":{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_id","type":"string"},"distant_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Distant_task_id","type":"string"},"integration_data":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_data","default":null,"type":"null"},"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"scheduled":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Scheduled","default":null,"type":["null","object"]},"starred":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Starred","default":false,"type":"boolean"},"occurrence":{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"},"recurrence":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-rec-id","title":"Recurrence"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Occurrence","default":null,"type":["null","object"]},"notes":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#document","title":"Notes","default":{"blocks":[]}},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]},"canEditTitle":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CanEditTitle","type":"boolean"},"context":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"native","type":"string"},{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"zapier","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}],"$id":"#task-client","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"google","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"notion","type":"string"}],"$id":"#integration-kind","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}],"$id":"#task-context","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Context","type":"string"},"todo":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Todo","type":"boolean"}},"$id":"#task","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"task":{"additionalProperties":false,"properties":{"created":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Created"},"deleted":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Deleted"},"etag":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#etag_intf","title":"Etag"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-rec-id","title":"Id"},"parent":{"additionalProperties":false,"properties":{"kind":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#kind","title":"Kind"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"recurrence":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#recurrence","title":"Recurrence"},"notes":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#document","title":"Notes","default":{"blocks":[]}},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]}},"$id":"#recurrent-task","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"icon":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Icon","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}],"$id":"#notification-chunk","$schema":"https://json-schema.org/draft/2019-09/schema","type":["object","string"]},"$id":"#notification-chunk-list-nonempty","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Message","type":"array"},"type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"error","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"info","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"warning","type":"string"}],"$id":"#notification-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","default":"info","type":"string"}},"$id":"#notification","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ notification: z
        .object({
          message: z
            .array(
              z.union([
                z
                  .object({
                    event: z
                      .object({
                        calendar: z.string().optional(),
                        calendar_status: z
                          .union([
                            z.literal("confirmed"),
                            z.literal("tentative"),
                            z.literal("cancelled"),
                          ])
                          .optional(),
                        creator: z
                          .object({
                            email: z.string().optional(),
                            name: z.string().optional(),
                            self: z.boolean().default(false),
                          })
                          .strict()
                          .optional(),
                        draft: z.boolean().optional(),
                        google_event_id: z.string().optional(),
                        id: z.string().optional(),
                        link: z
                          .object({
                            url: z.string().optional(),
                            type: z
                              .union([
                                z.literal("discord"),
                                z.literal("meet"),
                                z.literal("teams"),
                                z.literal("whereby"),
                                z.literal("zoom"),
                              ])
                              .optional(),
                          })
                          .strict()
                          .optional(),
                        slot: z
                          .object({
                            name: z.string().optional(),
                            kind: z
                              .union([
                                z.literal("focus"),
                                z.literal("meetings"),
                                z.literal("processing"),
                              ])
                              .optional(),
                          })
                          .strict()
                          .optional(),
                        archived: z.union([z.null(), z.string()]).default(null),
                        attendance: z
                          .union([
                            z.null(),
                            z.literal("attend"),
                            z.literal("ignore"),
                          ])
                          .default(null),
                        attendees: z
                          .array(
                            z
                              .object({
                                email: z.string().optional(),
                                name: z.string().optional(),
                                organizer: z.boolean().default(false),
                                self: z.boolean().default(false),
                                status: z
                                  .union([
                                    z.literal("yes"),
                                    z.literal("no"),
                                    z.literal("maybe"),
                                  ])
                                  .optional(),
                              })
                              .strict()
                          )
                          .default([]),
                        description: z
                          .union([z.null(), z.string()])
                          .default(null),
                        location: z.union([z.null(), z.string()]).default(null),
                        notes: z
                          .object({
                            blocks: z
                              .array(
                                z.record(z.any()).and(
                                  z.union([
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z
                                          .literal("blockquote")
                                          .optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("bullet").optional(),
                                        list_type: z
                                          .union([
                                            z.literal("ordered"),
                                            z.literal("unordered"),
                                          ])
                                          .optional(),
                                        content: z.string().optional(),
                                        depth: z.number().int().default(0),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("check").optional(),
                                        checked: z.boolean().optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("code").optional(),
                                        language: z.string().optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("callout").optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("divider").optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("embed").optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("heading").optional(),
                                        content: z.string().optional(),
                                        level: z.number().int().optional(),
                                        retracted: z.boolean().default(false),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("paragraph").optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("query").optional(),
                                        content: z.string().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z
                                          .literal("recurrent_task")
                                          .optional(),
                                        recurrent_task_id: z
                                          .string()
                                          .optional(),
                                        content: z.string().optional(),
                                        recurrence: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  start: z
                                                    .tuple([
                                                      z.number().int(),
                                                      z.number().int(),
                                                      z.number().int(),
                                                    ])
                                                    .optional(),
                                                  count: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  rule: z
                                                    .record(z.any())
                                                    .and(
                                                      z.union([
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("day")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("month")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                            day: z
                                                              .union([
                                                                z
                                                                  .number()
                                                                  .int(),
                                                                z.tuple([
                                                                  z.union([
                                                                    z.literal(
                                                                      "monday"
                                                                    ),
                                                                    z.literal(
                                                                      "tuesday"
                                                                    ),
                                                                    z.literal(
                                                                      "wednesday"
                                                                    ),
                                                                    z.literal(
                                                                      "thursday"
                                                                    ),
                                                                    z.literal(
                                                                      "friday"
                                                                    ),
                                                                    z.literal(
                                                                      "saturday"
                                                                    ),
                                                                    z.literal(
                                                                      "sunday"
                                                                    ),
                                                                  ]),
                                                                  z
                                                                    .number()
                                                                    .int(),
                                                                ]),
                                                              ])
                                                              .optional(),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("week")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                            weekdays: z
                                                              .object({
                                                                monday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                tuesday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                wednesday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                thursday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                friday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                saturday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                sunday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                              })
                                                              .strict()
                                                              .optional(),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal(
                                                                "workday"
                                                              )
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("year")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                            day: z
                                                              .number()
                                                              .int()
                                                              .optional(),
                                                            month: z
                                                              .union([
                                                                z.literal(
                                                                  "january"
                                                                ),
                                                                z.literal(
                                                                  "february"
                                                                ),
                                                                z.literal(
                                                                  "march"
                                                                ),
                                                                z.literal(
                                                                  "april"
                                                                ),
                                                                z.literal(
                                                                  "may"
                                                                ),
                                                                z.literal(
                                                                  "june"
                                                                ),
                                                                z.literal(
                                                                  "july"
                                                                ),
                                                                z.literal(
                                                                  "august"
                                                                ),
                                                                z.literal(
                                                                  "september"
                                                                ),
                                                                z.literal(
                                                                  "october"
                                                                ),
                                                                z.literal(
                                                                  "november"
                                                                ),
                                                                z.literal(
                                                                  "december"
                                                                ),
                                                              ])
                                                              .optional(),
                                                          })
                                                          .strict(),
                                                      ])
                                                    )
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  end: z.any().optional(),
                                                  start: z.any().optional(),
                                                  rule: z
                                                    .record(z.any())
                                                    .and(
                                                      z.union([
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("day")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("month")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                            day: z
                                                              .union([
                                                                z
                                                                  .number()
                                                                  .int(),
                                                                z.tuple([
                                                                  z.union([
                                                                    z.literal(
                                                                      "monday"
                                                                    ),
                                                                    z.literal(
                                                                      "tuesday"
                                                                    ),
                                                                    z.literal(
                                                                      "wednesday"
                                                                    ),
                                                                    z.literal(
                                                                      "thursday"
                                                                    ),
                                                                    z.literal(
                                                                      "friday"
                                                                    ),
                                                                    z.literal(
                                                                      "saturday"
                                                                    ),
                                                                    z.literal(
                                                                      "sunday"
                                                                    ),
                                                                  ]),
                                                                  z
                                                                    .number()
                                                                    .int(),
                                                                ]),
                                                              ])
                                                              .optional(),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("week")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                            weekdays: z
                                                              .object({
                                                                monday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                tuesday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                wednesday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                thursday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                friday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                saturday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                                sunday: z
                                                                  .boolean()
                                                                  .default(
                                                                    false
                                                                  ),
                                                              })
                                                              .strict()
                                                              .optional(),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal(
                                                                "workday"
                                                              )
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                          })
                                                          .strict(),
                                                        z
                                                          .object({
                                                            every: z
                                                              .literal("year")
                                                              .optional(),
                                                            period: z
                                                              .number()
                                                              .int()
                                                              .default(1),
                                                            day: z
                                                              .number()
                                                              .int()
                                                              .optional(),
                                                            month: z
                                                              .union([
                                                                z.literal(
                                                                  "january"
                                                                ),
                                                                z.literal(
                                                                  "february"
                                                                ),
                                                                z.literal(
                                                                  "march"
                                                                ),
                                                                z.literal(
                                                                  "april"
                                                                ),
                                                                z.literal(
                                                                  "may"
                                                                ),
                                                                z.literal(
                                                                  "june"
                                                                ),
                                                                z.literal(
                                                                  "july"
                                                                ),
                                                                z.literal(
                                                                  "august"
                                                                ),
                                                                z.literal(
                                                                  "september"
                                                                ),
                                                                z.literal(
                                                                  "october"
                                                                ),
                                                                z.literal(
                                                                  "november"
                                                                ),
                                                                z.literal(
                                                                  "december"
                                                                ),
                                                              ])
                                                              .optional(),
                                                          })
                                                          .strict(),
                                                      ])
                                                    )
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        id: z.string().optional(),
                                        type: z.literal("todo").optional(),
                                        checked: z.boolean().optional(),
                                        content: z.string().optional(),
                                        task: z.string().optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                              )
                              .optional(),
                          })
                          .strict()
                          .default({ blocks: [] }),
                        task: z.union([z.null(), z.string()]).default(null),
                        time: z
                          .record(z.any())
                          .and(
                            z.union([
                              z.object({ date: z.any().optional() }).strict(),
                              z
                                .object({
                                  start_date: z.any().optional(),
                                  end_date: z.any().optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  start_time: z.string().optional(),
                                  end_time: z.any().optional(),
                                })
                                .strict(),
                            ])
                          )
                          .optional(),
                        title: z.string().optional(),
                        allDay: z.boolean().optional(),
                        end: z.any().optional(),
                        isArchived: z.boolean().optional(),
                        role: z
                          .union([z.literal("active"), z.literal("passive")])
                          .optional(),
                        self: z.any().optional(),
                        start: z.any().optional(),
                        willAttend: z.any().optional(),
                      })
                      .strict()
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    event: z
                      .object({
                        calendar: z.string().optional(),
                        creator: z.any().optional(),
                        draft: z.boolean().optional(),
                        google_event_id: z.string().optional(),
                        id: z.string().optional(),
                        link: z.any().optional(),
                        attendees: z.array(z.any()).default([]),
                        daytime: z
                          .union([
                            z.null(),
                            z
                              .object({
                                time: z
                                  .object({
                                    hours: z
                                      .number()
                                      .int()
                                      .gte(0)
                                      .lte(24)
                                      .optional(),
                                    minutes: z.number().int().gte(0).lte(60),
                                    seconds: z.number().int().gte(0).lte(60),
                                  })
                                  .strict()
                                  .optional(),
                                duration: z.number().int().optional(),
                                timezone: z.string().optional(),
                              })
                              .strict(),
                          ])
                          .default(null),
                        description: z
                          .union([z.null(), z.string()])
                          .default(null),
                        exceptions: z
                          .array(
                            z.tuple([
                              z.any(),
                              z.union([
                                z.tuple([
                                  z.number().int(),
                                  z.number().int(),
                                  z.number().int(),
                                ]),
                                z.null(),
                              ]),
                            ])
                          )
                          .default([]),
                        location: z.union([z.null(), z.string()]).default(null),
                        notes: z.any().default({ blocks: [] }),
                        recurrence: z
                          .record(z.any())
                          .and(
                            z.union([
                              z
                                .object({
                                  start: z.any().optional(),
                                  count: z.number().int().optional(),
                                  rule: z.any().optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  end: z.any().optional(),
                                  start: z.any().optional(),
                                  rule: z.any().optional(),
                                })
                                .strict(),
                            ])
                          )
                          .optional(),
                        title: z.string().optional(),
                      })
                      .strict()
                      .optional(),
                  })
                  .strict(),
                z.object({ highlight: z.string().optional() }).strict(),
                z
                  .object({
                    name: z.string().optional(),
                    uri: z.any().optional(),
                  })
                  .strict(),
                z
                  .object({
                    page: z.string().optional(),
                    title: z.string().optional(),
                  })
                  .strict(),
                z
                  .object({
                    people: z.string().optional(),
                    name: z.string().optional(),
                  })
                  .strict(),
                z
                  .object({
                    task: z
                      .object({
                        allocations: z.array(z.any()).default([]),
                        client: z.union([z.null(), z.string()]).default(null),
                        created: z.any().optional(),
                        deleted: z.any().optional(),
                        etag: z
                          .object({
                            time: z.any().optional(),
                            version: z.number().int().optional(),
                          })
                          .strict()
                          .optional(),
                        id: z.any().optional(),
                        ignored: z.union([z.null(), z.string()]).default(null),
                        completed: z
                          .union([z.null(), z.string()])
                          .default(null),
                        integration_id: z.string().optional(),
                        distant_task_id: z.string().optional(),
                        integration_data: z.null().default(null),
                        parent: z
                          .union([
                            z.null(),
                            z
                              .object({
                                kind: z
                                  .union([
                                    z.literal("event"),
                                    z.literal("event-rec"),
                                    z.literal("page"),
                                    z.literal("people"),
                                    z.literal("task"),
                                    z.literal("task-rec"),
                                  ])
                                  .optional(),
                                id: z.string().optional(),
                              })
                              .strict(),
                          ])
                          .default(null),
                        scheduled: z
                          .union([
                            z.null(),
                            z
                              .object({
                                year: z.number().int().optional(),
                                n: z.number().int().optional(),
                              })
                              .strict(),
                            z.any(),
                          ])
                          .default(null),
                        starred: z.boolean().default(false),
                        occurrence: z
                          .union([
                            z.null(),
                            z
                              .object({
                                date: z.any().optional(),
                                recurrence: z.any().optional(),
                              })
                              .strict(),
                          ])
                          .default(null),
                        notes: z.any().default({ blocks: [] }),
                        title: z.string().optional(),
                        url: z.union([z.null(), z.string()]).default(null),
                        canEditTitle: z.boolean().optional(),
                        context: z
                          .union([
                            z.literal("native"),
                            z.union([z.literal("zapier"), z.string()]),
                            z.union([z.literal("google"), z.literal("notion")]),
                          ])
                          .optional(),
                        todo: z.boolean().optional(),
                      })
                      .strict()
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    task: z
                      .object({
                        created: z.any().optional(),
                        deleted: z.any().optional(),
                        etag: z.any().optional(),
                        id: z.any().optional(),
                        parent: z
                          .union([
                            z.null(),
                            z
                              .object({
                                kind: z.any().optional(),
                                id: z.string().optional(),
                              })
                              .strict(),
                          ])
                          .default(null),
                        recurrence: z.any().optional(),
                        notes: z.any().default({ blocks: [] }),
                        title: z.string().optional(),
                        url: z.union([z.null(), z.string()]).default(null),
                      })
                      .strict()
                      .optional(),
                  })
                  .strict(),
                z.object({ icon: z.string().optional() }).strict(),
                z.string(),
              ])
            )
            .optional(),
          type: z
            .union([
              z.literal("error"),
              z.literal("info"),
              z.literal("warning"),
            ])
            .default("info"),
        })
        .strict(),
    },
    async ({ notification }) => {
      try {
        const data = await sendRpcRequest("notifications.notify_rich", [
          notification,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching notifications.notify_rich: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "notificationsUpcomingEvents",
    "Upcoming events notifications",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("notifications.upcoming_events", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching notifications.upcoming_events: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "notificationsWarn",
    "Send warning notification message.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ message: z.string(),
    },
    async ({ message }) => {
      try {
        const data = await sendRpcRequest("notifications.warn", [message]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching notifications.warn: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "organizationCurrent",
    "Get the currently used organization",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("organization.current", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching organization.current: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("settingsHours", "Hours format.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("settings.hours", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching settings.hours: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("settingsLocale", "Locale.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("settings.locale", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching settings.locale: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "settingsPatch",
    "Edit settings.",
    {
      /*
{"additionalProperties":false,"properties":{"access_restrictions":{"additionalProperties":{"additionalProperties":false,"properties":{"allow_calendar_access":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Allow_calendar_access","default":null,"type":["boolean","null"]},"allow_contact_access":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Allow_contact_access","default":null,"type":["boolean","null"]}},"$id":"#access-restrictions-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$id":"#access-restrictions-patch-dictionary","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Access_restrictions","default":{},"type":"object"},"calendars":{"additionalProperties":{"additionalProperties":false,"properties":{"color":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"a","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"b","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"c","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"d","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"e","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"f","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"g","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"h","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"i","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Color","default":null,"type":["null","string"]},"disabled":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Disabled","default":null,"type":["boolean","null"]},"role":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"default","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"primary","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"secondary","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Role","default":null,"type":["null","string"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]},"$id":"#dictionary","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendars","default":{},"type":"object"},"locale":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","type":["integer","null"]}},"$id":"#locale-settings-patch","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Locale","default":{"hours":null},"type":"object"},"hours":{"additionalProperties":false,"properties":{"day":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","default":null,"type":["null","object"]},"noon":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Noon","default":null,"type":["null","object"]},"afternoon":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Afternoon","default":null,"type":["null","object"]},"evening":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Evening","default":null,"type":["null","object"]},"night":{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Night","default":null,"type":["null","object"]}},"$id":"#hours-settings-patch","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","default":{},"type":"object"},"mru_destinations":{"items":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Mru_destinations","default":null,"type":["array","null"]},"mru_peoples":{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Mru_peoples","default":null,"type":["array","null"]},"week_start":{"anyOf":[{"type":"null"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Week_start","default":null,"type":["null","string"]}},"$id":"#settings-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          access_restrictions: z
            .record(
              z
                .object({
                  allow_calendar_access: z
                    .union([z.boolean(), z.null()])
                    .default(null),
                  allow_contact_access: z
                    .union([z.boolean(), z.null()])
                    .default(null),
                })
                .strict()
            )
            .default({}),
          calendars: z
            .record(
              z.union([
                z.null(),
                z
                  .object({
                    color: z.union([
                      z.null(),
                      z.literal("a"),
                      z.literal("b"),
                      z.literal("c"),
                      z.literal("d"),
                      z.literal("e"),
                      z.literal("f"),
                      z.literal("g"),
                      z.literal("h"),
                      z.literal("i"),
                    ]),
                    disabled: z.union([z.boolean(), z.null()]),
                    role: z.union([
                      z.null(),
                      z.literal("default"),
                      z.literal("primary"),
                      z.literal("secondary"),
                    ]),
                  })
                  .strict(),
              ])
            )
            .default({}),
          locale: z
            .object({ hours: z.union([z.number().int(), z.null()]).optional() })
            .strict()
            .default({ hours: null }),
          hours: z
            .object({
              day: z
                .union([
                  z.null(),
                  z
                    .object({
                      hours: z.number().int().gte(0).lte(24).optional(),
                      minutes: z.number().int().gte(0).lte(60),
                      seconds: z.number().int().gte(0).lte(60),
                    })
                    .strict(),
                ])
                .default(null),
              noon: z
                .union([
                  z.null(),
                  z
                    .object({
                      hours: z.number().int().gte(0).lte(24).optional(),
                      minutes: z.number().int().gte(0).lte(60),
                      seconds: z.number().int().gte(0).lte(60),
                    })
                    .strict(),
                ])
                .default(null),
              afternoon: z
                .union([
                  z.null(),
                  z
                    .object({
                      hours: z.number().int().gte(0).lte(24).optional(),
                      minutes: z.number().int().gte(0).lte(60),
                      seconds: z.number().int().gte(0).lte(60),
                    })
                    .strict(),
                ])
                .default(null),
              evening: z
                .union([
                  z.null(),
                  z
                    .object({
                      hours: z.number().int().gte(0).lte(24).optional(),
                      minutes: z.number().int().gte(0).lte(60),
                      seconds: z.number().int().gte(0).lte(60),
                    })
                    .strict(),
                ])
                .default(null),
              night: z
                .union([
                  z.null(),
                  z
                    .object({
                      hours: z.number().int().gte(0).lte(24).optional(),
                      minutes: z.number().int().gte(0).lte(60),
                      seconds: z.number().int().gte(0).lte(60),
                    })
                    .strict(),
                ])
                .default(null),
            })
            .strict()
            .default({}),
          mru_destinations: z
            .union([
              z.array(
                z
                  .object({
                    kind: z
                      .union([
                        z.literal("event"),
                        z.literal("event-rec"),
                        z.literal("page"),
                        z.literal("people"),
                        z.literal("task"),
                        z.literal("task-rec"),
                      ])
                      .optional(),
                    id: z.string().optional(),
                  })
                  .strict()
              ),
              z.null(),
            ])
            .default(null),
          mru_peoples: z.union([z.array(z.string()), z.null()]).default(null),
          week_start: z
            .union([
              z.null(),
              z.literal("monday"),
              z.literal("tuesday"),
              z.literal("wednesday"),
              z.literal("thursday"),
              z.literal("friday"),
              z.literal("saturday"),
              z.literal("sunday"),
            ])
            .default(null),
        })
        .strict(),
    },
    async ({ patch }) => {
      try {
        const data = await sendRpcRequest("settings.patch", [patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching settings.patch: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("settingsSettings", "Settings.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("settings.settings", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching settings.settings: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("pageAll", "All pages.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("page.all", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching page.all: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "pageArchive",
    "Archive page.",
    {
      /*
{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("page.archive", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.archive: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("pageArchived", "All archived pages.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("page.archived", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching page.archived: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "pageCreate",
    "Create a pages.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ title: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]}
*/ parent: z.union([z.null(), z.string()]),
    },
    async ({ title, parent }) => {
      try {
        const data = await sendRpcRequest("page.create", [title, parent]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.create: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "pageDelete",
    "Delete page.",
    {
      /*
{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("page.delete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.delete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "pageGet",
    "Get a page.",
    {
      /*
{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("page.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "pageMove",
    "Change a page parent.",
    {
      /*
{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]}
*/ parent: z.union([z.null(), z.string()]),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}
*/ index: z.number().int(),
    },
    async ({ id, parent, index }) => {
      try {
        const data = await sendRpcRequest("page.move", [id, parent, index]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.move: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "pageUnarchive",
    "Unarchive page.",
    {
      /*
{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("page.unarchive", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.unarchive: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "pageUpdate",
    "Update a page.",
    {
      /*
{"$id":"#page-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"archived":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Archived","default":null,"type":["null","string"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":null,"type":["null","object"]},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","default":null,"type":["null","string"]},"parent":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","string"]}},"$id":"#page-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          archived: z.union([z.null(), z.string()]).default(null),
          notes: z
            .union([
              z.null(),
              z
                .object({
                  blocks: z
                    .array(
                      z.record(z.any()).and(
                        z.union([
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("blockquote").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("bullet").optional(),
                              list_type: z
                                .union([
                                  z.literal("ordered"),
                                  z.literal("unordered"),
                                ])
                                .optional(),
                              content: z.string().optional(),
                              depth: z.number().int(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("check").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("code").optional(),
                              language: z.string().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("callout").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("divider").optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("embed").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("heading").optional(),
                              content: z.string().optional(),
                              level: z.number().int().optional(),
                              retracted: z.boolean(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("paragraph").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("query").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("recurrent_task").optional(),
                              recurrent_task_id: z.string().optional(),
                              content: z.string().optional(),
                              recurrence: z
                                .record(z.any())
                                .and(
                                  z.union([
                                    z
                                      .object({
                                        start: z
                                          .tuple([
                                            z.number().int(),
                                            z.number().int(),
                                            z.number().int(),
                                          ])
                                          .optional(),
                                        count: z.number().int().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        end: z.any().optional(),
                                        start: z.any().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("todo").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                              task: z.string().optional(),
                            })
                            .strict(),
                        ])
                      )
                    )
                    .optional(),
                })
                .strict(),
            ])
            .default(null),
          title: z.union([z.null(), z.string()]).default(null),
          parent: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),
    },
    async ({ id, patch }) => {
      try {
        const data = await sendRpcRequest("page.update", [id, patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching page.update: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("pageWithoutTitle", "Pages without title.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("page.without_title", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching page.without_title: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "peopleByEmail",
    "The potential contact owning this email address.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ email: z.string(),
    },
    async ({ email }) => {
      try {
        const data = await sendRpcRequest("people.by_email", [email]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching people.by_email: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "peopleGet",
    "The contact with the given id.",
    {
      /*
{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("people.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching people.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "peoplePatch",
    "Modify a contact.",
    {
      /*
{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":null,"type":["null","object"]},"archived":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Archived","default":null,"type":["null","string"]}},"$id":"#api-person-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          notes: z
            .union([
              z.null(),
              z
                .object({
                  blocks: z
                    .array(
                      z.record(z.any()).and(
                        z.union([
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("blockquote").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("bullet").optional(),
                              list_type: z
                                .union([
                                  z.literal("ordered"),
                                  z.literal("unordered"),
                                ])
                                .optional(),
                              content: z.string().optional(),
                              depth: z.number().int(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("check").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("code").optional(),
                              language: z.string().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("callout").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("divider").optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("embed").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("heading").optional(),
                              content: z.string().optional(),
                              level: z.number().int().optional(),
                              retracted: z.boolean(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("paragraph").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("query").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("recurrent_task").optional(),
                              recurrent_task_id: z.string().optional(),
                              content: z.string().optional(),
                              recurrence: z
                                .record(z.any())
                                .and(
                                  z.union([
                                    z
                                      .object({
                                        start: z
                                          .tuple([
                                            z.number().int(),
                                            z.number().int(),
                                            z.number().int(),
                                          ])
                                          .optional(),
                                        count: z.number().int().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        end: z.any().optional(),
                                        start: z.any().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("todo").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                              task: z.string().optional(),
                            })
                            .strict(),
                        ])
                      )
                    )
                    .optional(),
                })
                .strict(),
            ])
            .default(null),
          archived: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),
    },
    async ({ id, patch }) => {
      try {
        const data = await sendRpcRequest("people.patch", [id, patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching people.patch: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "peopleRefresh",
    "Reload contact.",
    {
      /*
{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("people.refresh", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching people.refresh: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "peopleUseEmails",
    "Prioritize emails as recently used for future completions.",
    {
      /*
{"items":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ emails: z.array(z.string()),
    },
    async ({ emails }) => {
      try {
        const data = await sendRpcRequest("people.use_emails", [emails]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching people.use_emails: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planGetConfig",
    "Get the plans and pricing configuration",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]}
*/ organization_id: z.union([z.null(), z.string()]),
    },
    async ({ organization_id }) => {
      try {
        const data = await sendRpcRequest("plan.get_config", [organization_id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.get_config: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planSubscribe",
    "Subscribe to a plan",
    {
      /*
{"$id":"#org-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ organization_id: z.string(),

      /*
{"additionalProperties":false,"properties":{"price":{"$id":"#make","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Price","type":"string"}},"$id":"#subscription_creation","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ subscription_information: z
        .object({ price: z.string().optional() })
        .strict(),
    },
    async ({ organization_id, subscription_information }) => {
      try {
        const data = await sendRpcRequest("plan.subscribe", [
          organization_id,
          subscription_information,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.subscribe: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planRequestChange",
    "Request a subscription change. Optionnally returns the url of a page the user has to visit to confirm the change",
    {
      /*
{"$id":"#org-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ organization_id: z.string(),

      /*
{"anyOf":[{"additionalProperties":false,"properties":{"kind":{"const":"stripe_price","type":"string"},"id":{"$id":"#stripe_plan_id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"kind":{"const":"free","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#plan_kind","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ desired_plan: z
        .record(z.any())
        .and(
          z.union([
            z
              .object({
                kind: z.literal("stripe_price").optional(),
                id: z.string().optional(),
              })
              .strict(),
            z.object({ kind: z.literal("free").optional() }).strict(),
          ])
        ),
    },
    async ({ organization_id, desired_plan }) => {
      try {
        const data = await sendRpcRequest("plan.request_change", [
          organization_id,
          desired_plan,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.request_change: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planGetSubscriptions",
    "Get the subscriptions attached to a Organization",
    {
      /*
{"$id":"#org-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ organization_id: z.string(),
    },
    async ({ organization_id }) => {
      try {
        const data = await sendRpcRequest("plan.get_subscriptions", [
          organization_id,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.get_subscriptions: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planUnsubscribe",
    "unsubscribe from a plan",
    {
      /*
{"$id":"#org-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ organization_id: z.string(),

      /*
{"additionalProperties":false,"properties":{"subscription_id":{"$id":"#make","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Subscription_id","type":"string"}},"$id":"#deletion_request","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ deletion_information: z
        .object({ subscription_id: z.string().optional() })
        .strict(),
    },
    async ({ organization_id, deletion_information }) => {
      try {
        const data = await sendRpcRequest("plan.unsubscribe", [
          organization_id,
          deletion_information,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.unsubscribe: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planListInvoices",
    "List the invoices for the given organization",
    {
      /*
{"$id":"#org-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ organization_id: z.string(),

      /*
{"additionalProperties":false,"properties":{"customer":{"$id":"#make","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Customer","type":"string"},"status":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"draft","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"open","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"paid","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"uncollectible","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"void","type":"string"}],"$id":"#stripe-invoice-status","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Status","type":"string"},"subscription":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#make","title":"Subscription"},"starting_after":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#make","title":"Starting_after"},"ending_before":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#make","title":"Ending_before"},"limit":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Limit","type":"integer"}},"$id":"#invoices_query","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ query: z
        .object({
          customer: z.string().optional(),
          status: z
            .union([
              z.literal("draft"),
              z.literal("open"),
              z.literal("paid"),
              z.literal("uncollectible"),
              z.literal("void"),
            ])
            .optional(),
          subscription: z.any().optional(),
          starting_after: z.any().optional(),
          ending_before: z.any().optional(),
          limit: z.number().int().optional(),
        })
        .strict(),
    },
    async ({ organization_id, query }) => {
      try {
        const data = await sendRpcRequest("plan.list_invoices", [
          organization_id,
          query,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.list_invoices: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "planMakeCustomerPortal",
    "Create a temporary stripe portal for the given organization",
    {
      /*
{"$id":"#org-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ organization_id: z.string(),
    },
    async ({ organization_id }) => {
      try {
        const data = await sendRpcRequest("plan.make_customer_portal", [
          organization_id,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching plan.make_customer_portal: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskAllocate",
    "Allocate a task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"dates":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"date","type":"string"},"date":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Date","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"date_range","type":"string"},"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"month","type":"string"},"hint":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hint","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"},"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"week","type":"string"},"week":{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Week","type":"object"},"hint":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hint","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"year","type":"string"},"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#mandate-dates","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Dates","type":"object"},"daytime":{"items":[{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$id":"#daytime","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Daytime","type":"array"},"document":{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Document","type":"object"},"duration":{"$id":"#span","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Duration","type":"integer"},"participants":{"items":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"emailPrimary":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"EmailPrimary","type":"string"},"helper":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Helper","type":"string"},"id":{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#mandate-participant","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#mandate-participant-mandate-participant-lenient","$schema":"https://json-schema.org/draft/2019-09/schema","type":["object","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Participants","default":[],"type":"array"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#weekday"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#month","title":"Month"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#weekday"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#month","title":"Month"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"},"slot":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"additionalProperties":false,"properties":{"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"focus","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"meetings","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"processing","type":"string"}],"$id":"#slot-kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"}},"$id":"#slot-type","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Slot","type":"array"}},"$id":"#action_allocation","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ allocation: z
        .object({
          calendar: z.string().optional(),
          dates: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    type: z.literal("date").optional(),
                    date: z
                      .tuple([
                        z.number().int(),
                        z.number().int(),
                        z.number().int(),
                      ])
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("date_range").optional(),
                    end: z.any().optional(),
                    start: z.any().optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("month").optional(),
                    hint: z.number().int().optional(),
                    month: z
                      .union([
                        z.literal("january"),
                        z.literal("february"),
                        z.literal("march"),
                        z.literal("april"),
                        z.literal("may"),
                        z.literal("june"),
                        z.literal("july"),
                        z.literal("august"),
                        z.literal("september"),
                        z.literal("october"),
                        z.literal("november"),
                        z.literal("december"),
                      ])
                      .optional(),
                    year: z.number().int().optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("week").optional(),
                    week: z
                      .object({
                        year: z.number().int().optional(),
                        n: z.number().int().optional(),
                      })
                      .strict()
                      .optional(),
                    hint: z
                      .union([
                        z.literal("monday"),
                        z.literal("tuesday"),
                        z.literal("wednesday"),
                        z.literal("thursday"),
                        z.literal("friday"),
                        z.literal("saturday"),
                        z.literal("sunday"),
                      ])
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("year").optional(),
                    year: z.number().int().optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          daytime: z
            .tuple([
              z
                .object({
                  hours: z.number().int().gte(0).lte(24).optional(),
                  minutes: z.number().int().gte(0).lte(60).default(0),
                  seconds: z.number().int().gte(0).lte(60).default(0),
                })
                .strict(),
              z.union([
                z.null(),
                z
                  .object({
                    hours: z.number().int().gte(0).lte(24).optional(),
                    minutes: z.number().int().gte(0).lte(60),
                    seconds: z.number().int().gte(0).lte(60),
                  })
                  .strict(),
              ]),
            ])
            .optional(),
          document: z
            .object({
              id: z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict()
                .optional(),
              section: z.tuple([z.string(), z.number().int()]).optional(),
            })
            .strict()
            .optional(),
          duration: z.number().int().optional(),
          participants: z
            .array(
              z.union([
                z.string(),
                z
                  .object({
                    email: z.string().optional(),
                    emailPrimary: z.string().optional(),
                    helper: z.string().optional(),
                    id: z.string().optional(),
                  })
                  .strict(),
              ])
            )
            .default([]),
          recurrence: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    start: z.any().optional(),
                    count: z.number().int().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([z.any(), z.number().int()]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z.any().optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    end: z.any().optional(),
                    start: z.any().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([z.any(), z.number().int()]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z.any().optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          slot: z
            .tuple([
              z.string(),
              z
                .object({
                  name: z.string().optional(),
                  kind: z
                    .union([
                      z.literal("focus"),
                      z.literal("meetings"),
                      z.literal("processing"),
                    ])
                    .optional(),
                })
                .strict(),
            ])
            .optional(),
        })
        .strict(),
    },
    async ({ id, allocation }) => {
      try {
        const data = await sendRpcRequest("task.allocate", [id, allocation]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.allocate: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskBatch",
    "Tasks of a batch.",
    {
      /*
{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ week: z
        .object({
          year: z.number().int().optional(),
          n: z.number().int().optional(),
        })
        .strict(),
    },
    async ({ week }) => {
      try {
        const data = await sendRpcRequest("task.batch", [week]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.batch: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskBatched",
    "The batch of a task, if any.",
    {
      /*
{"additionalProperties":false,"properties":{"allocations":{"items":{"$id":"#event-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Allocations","default":[],"type":"array"},"client":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Client","default":null,"type":["null","string"]},"created":{"$id":"#time","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Created","type":"string"},"deleted":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Deleted"},"etag":{"additionalProperties":false,"properties":{"time":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#time","title":"Time"},"version":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Version","type":"integer"}},"$id":"#etag_intf","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Etag","type":"object"},"id":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"ignored":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Ignored","default":null,"type":["null","string"]},"completed":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Completed","default":null,"type":["null","string"]},"integration_id":{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_id","type":"string"},"distant_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Distant_task_id","type":"string"},"integration_data":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_data","default":null,"type":"null"},"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"scheduled":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Scheduled","default":null,"type":["array","null","object"]},"starred":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Starred","default":false,"type":"boolean"},"occurrence":{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"},"recurrence":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Occurrence","default":null,"type":["null","object"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-rec-id","title":"Recurrent_task_id"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-id","title":"Task"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]},"canEditTitle":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"CanEditTitle","type":"boolean"},"context":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"native","type":"string"},{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"zapier","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}],"$id":"#task-client","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"google","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"notion","type":"string"}],"$id":"#integration-kind","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}],"$id":"#task-context","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Context","type":"string"},"todo":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Todo","type":"boolean"}},"$id":"#task","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ task: z
        .object({
          allocations: z.array(z.string()).default([]),
          client: z.union([z.null(), z.string()]).default(null),
          created: z.string().optional(),
          deleted: z.any().optional(),
          etag: z
            .object({
              time: z.any().optional(),
              version: z.number().int().optional(),
            })
            .strict()
            .optional(),
          id: z.string().optional(),
          ignored: z.union([z.null(), z.string()]).default(null),
          completed: z.union([z.null(), z.string()]).default(null),
          integration_id: z.string().optional(),
          distant_task_id: z.string().optional(),
          integration_data: z.null().default(null),
          parent: z
            .union([
              z.null(),
              z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          scheduled: z
            .union([
              z.null(),
              z
                .object({
                  year: z.number().int().optional(),
                  n: z.number().int().optional(),
                })
                .strict(),
              z.tuple([z.number().int(), z.number().int(), z.number().int()]),
            ])
            .default(null),
          starred: z.boolean().default(false),
          occurrence: z
            .union([
              z.null(),
              z
                .object({
                  date: z.any().optional(),
                  recurrence: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          notes: z
            .object({
              blocks: z
                .array(
                  z.record(z.any()).and(
                    z.union([
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("blockquote").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("bullet").optional(),
                          list_type: z
                            .union([
                              z.literal("ordered"),
                              z.literal("unordered"),
                            ])
                            .optional(),
                          content: z.string().optional(),
                          depth: z.number().int().default(0),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("check").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("code").optional(),
                          language: z.string().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("callout").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("divider").optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("embed").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("heading").optional(),
                          content: z.string().optional(),
                          level: z.number().int().optional(),
                          retracted: z.boolean().default(false),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("paragraph").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("query").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("recurrent_task").optional(),
                          recurrent_task_id: z.any().optional(),
                          content: z.string().optional(),
                          recurrence: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    start: z.any().optional(),
                                    count: z.number().int().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    end: z.any().optional(),
                                    start: z.any().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("todo").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                          task: z.any().optional(),
                        })
                        .strict(),
                    ])
                  )
                )
                .optional(),
            })
            .strict()
            .default({ blocks: [] }),
          title: z.string().optional(),
          url: z.union([z.null(), z.string()]).default(null),
          canEditTitle: z.boolean().optional(),
          context: z
            .union([
              z.literal("native"),
              z.union([z.literal("zapier"), z.string()]),
              z.union([z.literal("google"), z.literal("notion")]),
            ])
            .optional(),
          todo: z.boolean().optional(),
        })
        .strict(),
    },
    async ({ task }) => {
      try {
        const data = await sendRpcRequest("task.batched", [task]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.batched: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskComplete",
    "Complete a task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task.complete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.complete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskCreate",
    "Create a task.",
    {
      /*
{"additionalProperties":false,"properties":{"ignored":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Ignored","default":null,"type":["null","string"]},"completed":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Completed","default":null,"type":["null","string"]},"integration_id":{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_id","type":"string"},"distant_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Distant_task_id","type":"string"},"integration_data":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_data","default":null,"type":"null"},"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"scheduled":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Scheduled","default":null,"type":["array","null","object"]},"starred":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Starred","default":false,"type":"boolean"},"occurrence":{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"},"recurrence":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Occurrence","default":null,"type":["null","object"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-rec-id","title":"Recurrent_task_id"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]}},"$id":"#task-read","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ task: z
        .object({
          ignored: z.union([z.null(), z.string()]).default(null),
          completed: z.union([z.null(), z.string()]).default(null),
          integration_id: z.string().optional(),
          distant_task_id: z.string().optional(),
          integration_data: z.null().default(null),
          parent: z
            .union([
              z.null(),
              z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          scheduled: z
            .union([
              z.null(),
              z
                .object({
                  year: z.number().int().optional(),
                  n: z.number().int().optional(),
                })
                .strict(),
              z.tuple([z.number().int(), z.number().int(), z.number().int()]),
            ])
            .default(null),
          starred: z.boolean().default(false),
          occurrence: z
            .union([
              z.null(),
              z
                .object({
                  date: z.any().optional(),
                  recurrence: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          notes: z
            .object({
              blocks: z
                .array(
                  z.record(z.any()).and(
                    z.union([
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("blockquote").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("bullet").optional(),
                          list_type: z
                            .union([
                              z.literal("ordered"),
                              z.literal("unordered"),
                            ])
                            .optional(),
                          content: z.string().optional(),
                          depth: z.number().int().default(0),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("check").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("code").optional(),
                          language: z.string().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("callout").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("divider").optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("embed").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("heading").optional(),
                          content: z.string().optional(),
                          level: z.number().int().optional(),
                          retracted: z.boolean().default(false),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("paragraph").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("query").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("recurrent_task").optional(),
                          recurrent_task_id: z.any().optional(),
                          content: z.string().optional(),
                          recurrence: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    start: z.any().optional(),
                                    count: z.number().int().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    end: z.any().optional(),
                                    start: z.any().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("todo").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                          task: z.string().optional(),
                        })
                        .strict(),
                    ])
                  )
                )
                .optional(),
            })
            .strict()
            .default({ blocks: [] }),
          title: z.string().optional(),
          url: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),

      /*
{"additionalProperties":false,"properties":{"document":{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Document","type":"object"},"notify":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notify","default":false,"type":"boolean"},"source":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"console","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"page_block","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"app_ui_element","type":"string"},"element_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Element_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"integration","type":"string"},"integration_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"graph","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"other","type":"string"},"source_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#metrics-object-source","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source","default":{"type":"app_ui_element","element_name":"unknown"},"type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]}
*/ options: z.union([
        z.null(),
        z
          .object({
            document: z
              .object({
                id: z
                  .object({
                    kind: z
                      .union([
                        z.literal("event"),
                        z.literal("event-rec"),
                        z.literal("page"),
                        z.literal("people"),
                        z.literal("task"),
                        z.literal("task-rec"),
                      ])
                      .optional(),
                    id: z.string().optional(),
                  })
                  .strict()
                  .optional(),
                section: z.tuple([z.string(), z.number().int()]).optional(),
              })
              .strict()
              .optional(),
            notify: z.boolean(),
            source: z
              .record(z.any())
              .and(
                z.union([
                  z.object({ type: z.literal("console").optional() }).strict(),
                  z
                    .object({ type: z.literal("page_block").optional() })
                    .strict(),
                  z
                    .object({
                      type: z.literal("app_ui_element").optional(),
                      element_name: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      type: z.literal("integration").optional(),
                      integration_name: z.string().optional(),
                    })
                    .strict(),
                  z.object({ type: z.literal("graph").optional() }).strict(),
                  z
                    .object({
                      type: z.literal("other").optional(),
                      source_name: z.string().optional(),
                    })
                    .strict(),
                ])
              ),
          })
          .strict(),
      ]),
    },
    async ({ task, options }) => {
      try {
        const data = await sendRpcRequest("task.create", [task, options]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.create: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskCreateAllocate",
    "Create an allocated task.",
    {
      /*
{"additionalProperties":false,"properties":{"ignored":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Ignored","default":null,"type":["null","string"]},"completed":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Completed","default":null,"type":["null","string"]},"integration_id":{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_id","type":"string"},"distant_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Distant_task_id","type":"string"},"integration_data":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_data","default":null,"type":"null"},"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"scheduled":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Scheduled","default":null,"type":["array","null","object"]},"starred":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Starred","default":false,"type":"boolean"},"occurrence":{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"},"recurrence":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Occurrence","default":null,"type":["null","object"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-rec-id","title":"Recurrent_task_id"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]}},"$id":"#task-read","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ task: z
        .object({
          ignored: z.union([z.null(), z.string()]).default(null),
          completed: z.union([z.null(), z.string()]).default(null),
          integration_id: z.string().optional(),
          distant_task_id: z.string().optional(),
          integration_data: z.null().default(null),
          parent: z
            .union([
              z.null(),
              z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          scheduled: z
            .union([
              z.null(),
              z
                .object({
                  year: z.number().int().optional(),
                  n: z.number().int().optional(),
                })
                .strict(),
              z.tuple([z.number().int(), z.number().int(), z.number().int()]),
            ])
            .default(null),
          starred: z.boolean().default(false),
          occurrence: z
            .union([
              z.null(),
              z
                .object({
                  date: z.any().optional(),
                  recurrence: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          notes: z
            .object({
              blocks: z
                .array(
                  z.record(z.any()).and(
                    z.union([
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("blockquote").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("bullet").optional(),
                          list_type: z
                            .union([
                              z.literal("ordered"),
                              z.literal("unordered"),
                            ])
                            .optional(),
                          content: z.string().optional(),
                          depth: z.number().int().default(0),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("check").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("code").optional(),
                          language: z.string().optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("callout").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("divider").optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("embed").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("heading").optional(),
                          content: z.string().optional(),
                          level: z.number().int().optional(),
                          retracted: z.boolean().default(false),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("paragraph").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("query").optional(),
                          content: z.string().optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("recurrent_task").optional(),
                          recurrent_task_id: z.any().optional(),
                          content: z.string().optional(),
                          recurrence: z
                            .record(z.any())
                            .and(
                              z.union([
                                z
                                  .object({
                                    start: z.any().optional(),
                                    count: z.number().int().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                                z
                                  .object({
                                    end: z.any().optional(),
                                    start: z.any().optional(),
                                    rule: z
                                      .record(z.any())
                                      .and(
                                        z.union([
                                          z
                                            .object({
                                              every: z
                                                .literal("day")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("month")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z
                                                .union([
                                                  z.number().int(),
                                                  z.tuple([
                                                    z.union([
                                                      z.literal("monday"),
                                                      z.literal("tuesday"),
                                                      z.literal("wednesday"),
                                                      z.literal("thursday"),
                                                      z.literal("friday"),
                                                      z.literal("saturday"),
                                                      z.literal("sunday"),
                                                    ]),
                                                    z.number().int(),
                                                  ]),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("week")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              weekdays: z
                                                .object({
                                                  monday: z
                                                    .boolean()
                                                    .default(false),
                                                  tuesday: z
                                                    .boolean()
                                                    .default(false),
                                                  wednesday: z
                                                    .boolean()
                                                    .default(false),
                                                  thursday: z
                                                    .boolean()
                                                    .default(false),
                                                  friday: z
                                                    .boolean()
                                                    .default(false),
                                                  saturday: z
                                                    .boolean()
                                                    .default(false),
                                                  sunday: z
                                                    .boolean()
                                                    .default(false),
                                                })
                                                .strict()
                                                .optional(),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("workday")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                            })
                                            .strict(),
                                          z
                                            .object({
                                              every: z
                                                .literal("year")
                                                .optional(),
                                              period: z
                                                .number()
                                                .int()
                                                .default(1),
                                              day: z.number().int().optional(),
                                              month: z
                                                .union([
                                                  z.literal("january"),
                                                  z.literal("february"),
                                                  z.literal("march"),
                                                  z.literal("april"),
                                                  z.literal("may"),
                                                  z.literal("june"),
                                                  z.literal("july"),
                                                  z.literal("august"),
                                                  z.literal("september"),
                                                  z.literal("october"),
                                                  z.literal("november"),
                                                  z.literal("december"),
                                                ])
                                                .optional(),
                                            })
                                            .strict(),
                                        ])
                                      )
                                      .optional(),
                                  })
                                  .strict(),
                              ])
                            )
                            .optional(),
                        })
                        .strict(),
                      z
                        .object({
                          id: z.string().optional(),
                          type: z.literal("todo").optional(),
                          checked: z.boolean().optional(),
                          content: z.string().optional(),
                          task: z.string().optional(),
                        })
                        .strict(),
                    ])
                  )
                )
                .optional(),
            })
            .strict()
            .default({ blocks: [] }),
          title: z.string().optional(),
          url: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),

      /*
{"additionalProperties":false,"properties":{"calendar":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Calendar","type":"string"},"dates":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"date","type":"string"},"date":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Date","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"date_range","type":"string"},"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"month","type":"string"},"hint":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hint","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"},"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"week","type":"string"},"week":{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Week","type":"object"},"hint":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hint","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"year","type":"string"},"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#mandate-dates","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Dates","type":"object"},"daytime":{"items":[{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$id":"#daytime","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"hours":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Hours","maximum":24,"minimum":0,"type":"integer"},"minutes":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Minutes","default":0,"maximum":60,"minimum":0,"type":"integer"},"seconds":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Seconds","default":0,"maximum":60,"minimum":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Daytime","type":"array"},"document":{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Document","type":"object"},"duration":{"$id":"#span","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Duration","type":"integer"},"participants":{"items":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"additionalProperties":false,"properties":{"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"},"emailPrimary":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"EmailPrimary","type":"string"},"helper":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Helper","type":"string"},"id":{"$id":"#people-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#mandate-participant","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#mandate-participant-mandate-participant-lenient","$schema":"https://json-schema.org/draft/2019-09/schema","type":["object","string"]},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Participants","default":[],"type":"array"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#weekday"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#month","title":"Month"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#weekday"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#month","title":"Month"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"},"slot":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"additionalProperties":false,"properties":{"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"focus","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"meetings","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"processing","type":"string"}],"$id":"#slot-kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"}},"$id":"#slot-type","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Slot","type":"array"}},"$id":"#action_allocation","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ allocation: z
        .object({
          calendar: z.string().optional(),
          dates: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    type: z.literal("date").optional(),
                    date: z
                      .tuple([
                        z.number().int(),
                        z.number().int(),
                        z.number().int(),
                      ])
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("date_range").optional(),
                    end: z.any().optional(),
                    start: z.any().optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("month").optional(),
                    hint: z.number().int().optional(),
                    month: z
                      .union([
                        z.literal("january"),
                        z.literal("february"),
                        z.literal("march"),
                        z.literal("april"),
                        z.literal("may"),
                        z.literal("june"),
                        z.literal("july"),
                        z.literal("august"),
                        z.literal("september"),
                        z.literal("october"),
                        z.literal("november"),
                        z.literal("december"),
                      ])
                      .optional(),
                    year: z.number().int().optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("week").optional(),
                    week: z
                      .object({
                        year: z.number().int().optional(),
                        n: z.number().int().optional(),
                      })
                      .strict()
                      .optional(),
                    hint: z
                      .union([
                        z.literal("monday"),
                        z.literal("tuesday"),
                        z.literal("wednesday"),
                        z.literal("thursday"),
                        z.literal("friday"),
                        z.literal("saturday"),
                        z.literal("sunday"),
                      ])
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    type: z.literal("year").optional(),
                    year: z.number().int().optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          daytime: z
            .tuple([
              z
                .object({
                  hours: z.number().int().gte(0).lte(24).optional(),
                  minutes: z.number().int().gte(0).lte(60).default(0),
                  seconds: z.number().int().gte(0).lte(60).default(0),
                })
                .strict(),
              z.union([
                z.null(),
                z
                  .object({
                    hours: z.number().int().gte(0).lte(24).optional(),
                    minutes: z.number().int().gte(0).lte(60),
                    seconds: z.number().int().gte(0).lte(60),
                  })
                  .strict(),
              ]),
            ])
            .optional(),
          document: z
            .object({
              id: z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict()
                .optional(),
              section: z.tuple([z.string(), z.number().int()]).optional(),
            })
            .strict()
            .optional(),
          duration: z.number().int().optional(),
          participants: z
            .array(
              z.union([
                z.string(),
                z
                  .object({
                    email: z.string().optional(),
                    emailPrimary: z.string().optional(),
                    helper: z.string().optional(),
                    id: z.string().optional(),
                  })
                  .strict(),
              ])
            )
            .default([]),
          recurrence: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    start: z.any().optional(),
                    count: z.number().int().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([z.any(), z.number().int()]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z.any().optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    end: z.any().optional(),
                    start: z.any().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([z.any(), z.number().int()]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z.any().optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          slot: z
            .tuple([
              z.string(),
              z
                .object({
                  name: z.string().optional(),
                  kind: z
                    .union([
                      z.literal("focus"),
                      z.literal("meetings"),
                      z.literal("processing"),
                    ])
                    .optional(),
                })
                .strict(),
            ])
            .optional(),
        })
        .strict(),

      /*
{"additionalProperties":false,"properties":{"document":{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Document","type":"object"},"notify":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notify","default":false,"type":"boolean"},"source":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"console","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"page_block","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"app_ui_element","type":"string"},"element_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Element_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"integration","type":"string"},"integration_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"graph","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"other","type":"string"},"source_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#metrics-object-source","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source","default":{"type":"app_ui_element","element_name":"unknown"},"type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]}
*/ options: z.union([
        z.null(),
        z
          .object({
            document: z
              .object({
                id: z
                  .object({
                    kind: z
                      .union([
                        z.literal("event"),
                        z.literal("event-rec"),
                        z.literal("page"),
                        z.literal("people"),
                        z.literal("task"),
                        z.literal("task-rec"),
                      ])
                      .optional(),
                    id: z.string().optional(),
                  })
                  .strict()
                  .optional(),
                section: z.tuple([z.string(), z.number().int()]).optional(),
              })
              .strict()
              .optional(),
            notify: z.boolean(),
            source: z
              .record(z.any())
              .and(
                z.union([
                  z.object({ type: z.literal("console").optional() }).strict(),
                  z
                    .object({ type: z.literal("page_block").optional() })
                    .strict(),
                  z
                    .object({
                      type: z.literal("app_ui_element").optional(),
                      element_name: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      type: z.literal("integration").optional(),
                      integration_name: z.string().optional(),
                    })
                    .strict(),
                  z.object({ type: z.literal("graph").optional() }).strict(),
                  z
                    .object({
                      type: z.literal("other").optional(),
                      source_name: z.string().optional(),
                    })
                    .strict(),
                ])
              ),
          })
          .strict(),
      ]),
    },
    async ({ task, allocation, options }) => {
      try {
        const data = await sendRpcRequest("task.create_allocate", [
          task,
          allocation,
          options,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.create_allocate: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskDay",
    "Tasks of a day sorted by: starred < default < (completed or ignored).",
    {
      /*
{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}
*/ day: z.tuple([z.number().int(), z.number().int(), z.number().int()]),
    },
    async ({ day }) => {
      try {
        const data = await sendRpcRequest("task.day", [day]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.day: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskDelete",
    "Delete a task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task.delete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.delete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskGet",
    "A task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskMove",
    "Move a task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ destination: z
        .object({
          id: z
            .object({
              kind: z
                .union([
                  z.literal("event"),
                  z.literal("event-rec"),
                  z.literal("page"),
                  z.literal("people"),
                  z.literal("task"),
                  z.literal("task-rec"),
                ])
                .optional(),
              id: z.string().optional(),
            })
            .strict()
            .optional(),
          section: z.tuple([z.string(), z.number().int()]).optional(),
        })
        .strict(),
    },
    async ({ id, destination }) => {
      try {
        const data = await sendRpcRequest("task.move", [id, destination]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.move: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskOrphan",
    "Remove task parent.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task.orphan", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.orphan: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskUncomplete",
    "Uncomplete a task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task.uncomplete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.uncomplete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskUpcoming",
    "Non-allocated organized by week and sorted alphabetically.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("task.upcoming", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.upcoming: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("taskUnplanned", "Unplanned tasks.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("task.unplanned", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching task.unplanned: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "taskUpdate",
    "Patch a task.",
    {
      /*
{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"ignored":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Ignored","default":null,"type":["null","string"]},"completed":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Completed","default":null,"type":["null","string"]},"integration_id":{"$id":"#integration-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_id","type":"string"},"distant_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Distant_task_id","type":"string"},"integration_data":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_data","default":null,"type":"null"},"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"scheduled":{"anyOf":[{"type":"null"},{"type":"null"},{"additionalProperties":false,"properties":{"year":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Year","type":"integer"},"n":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"N","type":"integer"}},"$id":"#week","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Scheduled","default":null,"type":["array","null","object"]},"starred":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Starred","default":null,"type":["boolean","null"]},"occurrence":{"additionalProperties":false,"properties":{"date":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Date"},"recurrence":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Occurrence","default":null,"type":["null","object"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#task-rec-id","title":"Recurrent_task_id"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":null,"type":["null","object"]},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","default":null,"type":["null","string"]},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]}},"$id":"#task-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          ignored: z.union([z.null(), z.string()]).default(null),
          completed: z.union([z.null(), z.string()]).default(null),
          integration_id: z.string().optional(),
          distant_task_id: z.string().optional(),
          integration_data: z.null().default(null),
          parent: z
            .union([
              z.null(),
              z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          scheduled: z
            .union([
              z.null(),
              z.null(),
              z
                .object({
                  year: z.number().int().optional(),
                  n: z.number().int().optional(),
                })
                .strict(),
              z.tuple([z.number().int(), z.number().int(), z.number().int()]),
            ])
            .default(null),
          starred: z.union([z.boolean(), z.null()]).default(null),
          occurrence: z
            .union([
              z.null(),
              z
                .object({
                  date: z.any().optional(),
                  recurrence: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          notes: z
            .union([
              z.null(),
              z
                .object({
                  blocks: z
                    .array(
                      z.record(z.any()).and(
                        z.union([
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("blockquote").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("bullet").optional(),
                              list_type: z
                                .union([
                                  z.literal("ordered"),
                                  z.literal("unordered"),
                                ])
                                .optional(),
                              content: z.string().optional(),
                              depth: z.number().int(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("check").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("code").optional(),
                              language: z.string().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("callout").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("divider").optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("embed").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("heading").optional(),
                              content: z.string().optional(),
                              level: z.number().int().optional(),
                              retracted: z.boolean(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("paragraph").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("query").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("recurrent_task").optional(),
                              recurrent_task_id: z.any().optional(),
                              content: z.string().optional(),
                              recurrence: z
                                .record(z.any())
                                .and(
                                  z.union([
                                    z
                                      .object({
                                        start: z.any().optional(),
                                        count: z.number().int().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        end: z.any().optional(),
                                        start: z.any().optional(),
                                        rule: z
                                          .record(z.any())
                                          .and(
                                            z.union([
                                              z
                                                .object({
                                                  every: z
                                                    .literal("day")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("month")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .union([
                                                      z.number().int(),
                                                      z.tuple([
                                                        z.union([
                                                          z.literal("monday"),
                                                          z.literal("tuesday"),
                                                          z.literal(
                                                            "wednesday"
                                                          ),
                                                          z.literal("thursday"),
                                                          z.literal("friday"),
                                                          z.literal("saturday"),
                                                          z.literal("sunday"),
                                                        ]),
                                                        z.number().int(),
                                                      ]),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("week")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  weekdays: z
                                                    .object({
                                                      monday: z.boolean(),
                                                      tuesday: z.boolean(),
                                                      wednesday: z.boolean(),
                                                      thursday: z.boolean(),
                                                      friday: z.boolean(),
                                                      saturday: z.boolean(),
                                                      sunday: z.boolean(),
                                                    })
                                                    .strict()
                                                    .optional(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("workday")
                                                    .optional(),
                                                  period: z.number().int(),
                                                })
                                                .strict(),
                                              z
                                                .object({
                                                  every: z
                                                    .literal("year")
                                                    .optional(),
                                                  period: z.number().int(),
                                                  day: z
                                                    .number()
                                                    .int()
                                                    .optional(),
                                                  month: z
                                                    .union([
                                                      z.literal("january"),
                                                      z.literal("february"),
                                                      z.literal("march"),
                                                      z.literal("april"),
                                                      z.literal("may"),
                                                      z.literal("june"),
                                                      z.literal("july"),
                                                      z.literal("august"),
                                                      z.literal("september"),
                                                      z.literal("october"),
                                                      z.literal("november"),
                                                      z.literal("december"),
                                                    ])
                                                    .optional(),
                                                })
                                                .strict(),
                                            ])
                                          )
                                          .optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("todo").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                              task: z.string().optional(),
                            })
                            .strict(),
                        ])
                      )
                    )
                    .optional(),
                })
                .strict(),
            ])
            .default(null),
          title: z.union([z.null(), z.string()]).default(null),
          url: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]}
*/ confirm: z.union([z.null(), z.string()]),
    },
    async ({ id, patch, confirm }) => {
      try {
        const data = await sendRpcRequest("task.update", [id, patch, confirm]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task.update: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskRecurrentAll",
    "All recurrent task sorted by decreasing order of frequency.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("task_recurrent.all", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task_recurrent.all: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskRecurrentCreate",
    "Create a recurrent task.",
    {
      /*
{"additionalProperties":false,"properties":{"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#recurrence","title":"Recurrence"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$id":"#document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":{"blocks":[]},"type":"object"},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","type":"string"},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]}},"$id":"#task-recurrent-read","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ task: z
        .object({
          parent: z
            .union([
              z.null(),
              z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          recurrence: z
            .record(z.any())
            .and(
              z.union([
                z
                  .object({
                    start: z
                      .tuple([
                        z.number().int(),
                        z.number().int(),
                        z.number().int(),
                      ])
                      .optional(),
                    count: z.number().int().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([
                                    z.union([
                                      z.literal("monday"),
                                      z.literal("tuesday"),
                                      z.literal("wednesday"),
                                      z.literal("thursday"),
                                      z.literal("friday"),
                                      z.literal("saturday"),
                                      z.literal("sunday"),
                                    ]),
                                    z.number().int(),
                                  ]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z
                                .union([
                                  z.literal("january"),
                                  z.literal("february"),
                                  z.literal("march"),
                                  z.literal("april"),
                                  z.literal("may"),
                                  z.literal("june"),
                                  z.literal("july"),
                                  z.literal("august"),
                                  z.literal("september"),
                                  z.literal("october"),
                                  z.literal("november"),
                                  z.literal("december"),
                                ])
                                .optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
                z
                  .object({
                    end: z.any().optional(),
                    start: z.any().optional(),
                    rule: z
                      .record(z.any())
                      .and(
                        z.union([
                          z
                            .object({
                              every: z.literal("day").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("month").optional(),
                              period: z.number().int().default(1),
                              day: z
                                .union([
                                  z.number().int(),
                                  z.tuple([
                                    z.union([
                                      z.literal("monday"),
                                      z.literal("tuesday"),
                                      z.literal("wednesday"),
                                      z.literal("thursday"),
                                      z.literal("friday"),
                                      z.literal("saturday"),
                                      z.literal("sunday"),
                                    ]),
                                    z.number().int(),
                                  ]),
                                ])
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("week").optional(),
                              period: z.number().int().default(1),
                              weekdays: z
                                .object({
                                  monday: z.boolean().default(false),
                                  tuesday: z.boolean().default(false),
                                  wednesday: z.boolean().default(false),
                                  thursday: z.boolean().default(false),
                                  friday: z.boolean().default(false),
                                  saturday: z.boolean().default(false),
                                  sunday: z.boolean().default(false),
                                })
                                .strict()
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("workday").optional(),
                              period: z.number().int().default(1),
                            })
                            .strict(),
                          z
                            .object({
                              every: z.literal("year").optional(),
                              period: z.number().int().default(1),
                              day: z.number().int().optional(),
                              month: z
                                .union([
                                  z.literal("january"),
                                  z.literal("february"),
                                  z.literal("march"),
                                  z.literal("april"),
                                  z.literal("may"),
                                  z.literal("june"),
                                  z.literal("july"),
                                  z.literal("august"),
                                  z.literal("september"),
                                  z.literal("october"),
                                  z.literal("november"),
                                  z.literal("december"),
                                ])
                                .optional(),
                            })
                            .strict(),
                        ])
                      )
                      .optional(),
                  })
                  .strict(),
              ])
            )
            .optional(),
          notes: z
            .object({
              blocks: z
                .array(
                  z
                    .record(z.any())
                    .and(
                      z.union([
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("blockquote").optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("bullet").optional(),
                            list_type: z
                              .union([
                                z.literal("ordered"),
                                z.literal("unordered"),
                              ])
                              .optional(),
                            content: z.string().optional(),
                            depth: z.number().int().default(0),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("check").optional(),
                            checked: z.boolean().optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("code").optional(),
                            language: z.string().optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("callout").optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("divider").optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("embed").optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("heading").optional(),
                            content: z.string().optional(),
                            level: z.number().int().optional(),
                            retracted: z.boolean().default(false),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("paragraph").optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("query").optional(),
                            content: z.string().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("recurrent_task").optional(),
                            recurrent_task_id: z.string().optional(),
                            content: z.string().optional(),
                            recurrence: z.any().optional(),
                          })
                          .strict(),
                        z
                          .object({
                            id: z.string().optional(),
                            type: z.literal("todo").optional(),
                            checked: z.boolean().optional(),
                            content: z.string().optional(),
                            task: z.string().optional(),
                          })
                          .strict(),
                      ])
                    )
                )
                .optional(),
            })
            .strict()
            .default({ blocks: [] }),
          title: z.string().optional(),
          url: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),

      /*
{"additionalProperties":false,"properties":{"document":{"additionalProperties":false,"properties":{"id":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"object"},"section":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Section","type":"array"}},"$id":"#mandate-document","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Document","type":"object"},"notify":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notify","default":false,"type":"boolean"},"source":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"console","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"page_block","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"app_ui_element","type":"string"},"element_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Element_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"integration","type":"string"},"integration_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"graph","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"other","type":"string"},"source_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#metrics-object-source","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source","default":{"type":"app_ui_element","element_name":"unknown"},"type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","object"]}
*/ options: z.union([
        z.null(),
        z
          .object({
            document: z
              .object({
                id: z
                  .object({
                    kind: z
                      .union([
                        z.literal("event"),
                        z.literal("event-rec"),
                        z.literal("page"),
                        z.literal("people"),
                        z.literal("task"),
                        z.literal("task-rec"),
                      ])
                      .optional(),
                    id: z.string().optional(),
                  })
                  .strict()
                  .optional(),
                section: z.tuple([z.string(), z.number().int()]).optional(),
              })
              .strict()
              .optional(),
            notify: z.boolean(),
            source: z
              .record(z.any())
              .and(
                z.union([
                  z.object({ type: z.literal("console").optional() }).strict(),
                  z
                    .object({ type: z.literal("page_block").optional() })
                    .strict(),
                  z
                    .object({
                      type: z.literal("app_ui_element").optional(),
                      element_name: z.string().optional(),
                    })
                    .strict(),
                  z
                    .object({
                      type: z.literal("integration").optional(),
                      integration_name: z.string().optional(),
                    })
                    .strict(),
                  z.object({ type: z.literal("graph").optional() }).strict(),
                  z
                    .object({
                      type: z.literal("other").optional(),
                      source_name: z.string().optional(),
                    })
                    .strict(),
                ])
              ),
          })
          .strict(),
      ]),
    },
    async ({ task, options }) => {
      try {
        const data = await sendRpcRequest("task_recurrent.create", [
          task,
          options,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task_recurrent.create: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskRecurrentDelete",
    "Delete a recurrent task.",
    {
      /*
{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task_recurrent.delete", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task_recurrent.delete: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskRecurrentGet",
    "A recurrent task.",
    {
      /*
{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("task_recurrent.get", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task_recurrent.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskRecurrentUpdate",
    "Patch a recurrent task.",
    {
      /*
{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ id: z.string(),

      /*
{"additionalProperties":false,"properties":{"parent":{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Parent","default":null,"type":["null","object"]},"recurrence":{"anyOf":[{"type":"null"},{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","default":null,"type":["null","object"]},"notes":{"additionalProperties":false,"properties":{"blocks":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"blockquote","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"bullet","type":"string"},"list_type":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"ordered","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"unordered","type":"string"}],"$id":"#block-list-type","$schema":"https://json-schema.org/draft/2019-09/schema","title":"List_type","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"depth":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Depth","default":0,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"check","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"code","type":"string"},"language":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Language","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"callout","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"divider","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"embed","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"heading","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"level":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Level","type":"integer"},"retracted":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Retracted","default":false,"type":"boolean"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"paragraph","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"query","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"recurrent_task","type":"string"},"recurrent_task_id":{"$id":"#task-rec-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrent_task_id","type":"string"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"recurrence":{"anyOf":[{"additionalProperties":false,"properties":{"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#rule","title":"Rule"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Recurrence","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#block-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"type":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type","const":"todo","type":"string"},"checked":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Checked","type":"boolean"},"content":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Content","type":"string"},"task":{"$id":"#task-id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Task","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#block","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Blocks","type":"array"}},"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Notes","default":null,"type":["null","object"]},"title":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Title","default":null,"type":["null","string"]},"url":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Url","default":null,"type":["null","string"]}},"$id":"#task-recurrent-patch","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ patch: z
        .object({
          parent: z
            .union([
              z.null(),
              z
                .object({
                  kind: z
                    .union([
                      z.literal("event"),
                      z.literal("event-rec"),
                      z.literal("page"),
                      z.literal("people"),
                      z.literal("task"),
                      z.literal("task-rec"),
                    ])
                    .optional(),
                  id: z.string().optional(),
                })
                .strict(),
            ])
            .default(null),
          recurrence: z.union([z.null(), z.any(), z.any()]).default(null),
          notes: z
            .union([
              z.null(),
              z
                .object({
                  blocks: z
                    .array(
                      z.record(z.any()).and(
                        z.union([
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("blockquote").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("bullet").optional(),
                              list_type: z
                                .union([
                                  z.literal("ordered"),
                                  z.literal("unordered"),
                                ])
                                .optional(),
                              content: z.string().optional(),
                              depth: z.number().int(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("check").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("code").optional(),
                              language: z.string().optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("callout").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("divider").optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("embed").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("heading").optional(),
                              content: z.string().optional(),
                              level: z.number().int().optional(),
                              retracted: z.boolean(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("paragraph").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("query").optional(),
                              content: z.string().optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("recurrent_task").optional(),
                              recurrent_task_id: z.string().optional(),
                              content: z.string().optional(),
                              recurrence: z
                                .record(z.any())
                                .and(
                                  z.union([
                                    z
                                      .object({
                                        start: z.any().optional(),
                                        count: z.number().int().optional(),
                                        rule: z.any().optional(),
                                      })
                                      .strict(),
                                    z
                                      .object({
                                        end: z.any().optional(),
                                        start: z.any().optional(),
                                        rule: z.any().optional(),
                                      })
                                      .strict(),
                                  ])
                                )
                                .optional(),
                            })
                            .strict(),
                          z
                            .object({
                              id: z.string().optional(),
                              type: z.literal("todo").optional(),
                              checked: z.boolean().optional(),
                              content: z.string().optional(),
                              task: z.string().optional(),
                            })
                            .strict(),
                        ])
                      )
                    )
                    .optional(),
                })
                .strict(),
            ])
            .default(null),
          title: z.union([z.null(), z.string()]).default(null),
          url: z.union([z.null(), z.string()]).default(null),
        })
        .strict(),
    },
    async ({ id, patch }) => {
      try {
        const data = await sendRpcRequest("task_recurrent.update", [id, patch]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task_recurrent.update: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "taskRecurrentToString",
    "Convert a recurrence into a string",
    {
      /*
{"anyOf":[{"additionalProperties":false,"properties":{"start":{"items":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$id":"#date","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Start","type":"array"},"count":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Count","type":"integer"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"end":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"End"},"start":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#date","title":"Start"},"rule":{"anyOf":[{"additionalProperties":false,"properties":{"every":{"const":"day","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"month","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"},{"items":[{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"monday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"tuesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"wednesday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"thursday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"friday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"saturday","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"sunday","type":"string"}],"$id":"#weekday","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"integer"}],"$schema":"https://json-schema.org/draft/2019-09/schema","type":"array"}],"$id":"#month_day","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":["array","integer"]}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"week","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"weekdays":{"additionalProperties":false,"properties":{"monday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Monday","default":false,"type":"boolean"},"tuesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Tuesday","default":false,"type":"boolean"},"wednesday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Wednesday","default":false,"type":"boolean"},"thursday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Thursday","default":false,"type":"boolean"},"friday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Friday","default":false,"type":"boolean"},"saturday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Saturday","default":false,"type":"boolean"},"sunday":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sunday","default":false,"type":"boolean"}},"$id":"#weekdays","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Weekdays","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"workday","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"every":{"const":"year","type":"string"},"period":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Period","default":1,"type":"integer"},"day":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Day","type":"integer"},"month":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"january","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"february","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"march","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"april","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"may","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"june","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"july","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"august","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"september","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"october","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"november","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"december","type":"string"}],"$id":"#month","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Month","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#rule","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Rule","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#recurrence","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ recurrence: z.record(z.any()).and(
        z.union([
          z
            .object({
              start: z
                .tuple([z.number().int(), z.number().int(), z.number().int()])
                .optional(),
              count: z.number().int().optional(),
              rule: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        every: z.literal("day").optional(),
                        period: z.number().int().default(1),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("month").optional(),
                        period: z.number().int().default(1),
                        day: z
                          .union([
                            z.number().int(),
                            z.tuple([
                              z.union([
                                z.literal("monday"),
                                z.literal("tuesday"),
                                z.literal("wednesday"),
                                z.literal("thursday"),
                                z.literal("friday"),
                                z.literal("saturday"),
                                z.literal("sunday"),
                              ]),
                              z.number().int(),
                            ]),
                          ])
                          .optional(),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("week").optional(),
                        period: z.number().int().default(1),
                        weekdays: z
                          .object({
                            monday: z.boolean().default(false),
                            tuesday: z.boolean().default(false),
                            wednesday: z.boolean().default(false),
                            thursday: z.boolean().default(false),
                            friday: z.boolean().default(false),
                            saturday: z.boolean().default(false),
                            sunday: z.boolean().default(false),
                          })
                          .strict()
                          .optional(),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("workday").optional(),
                        period: z.number().int().default(1),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("year").optional(),
                        period: z.number().int().default(1),
                        day: z.number().int().optional(),
                        month: z
                          .union([
                            z.literal("january"),
                            z.literal("february"),
                            z.literal("march"),
                            z.literal("april"),
                            z.literal("may"),
                            z.literal("june"),
                            z.literal("july"),
                            z.literal("august"),
                            z.literal("september"),
                            z.literal("october"),
                            z.literal("november"),
                            z.literal("december"),
                          ])
                          .optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              end: z.any().optional(),
              start: z.any().optional(),
              rule: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        every: z.literal("day").optional(),
                        period: z.number().int().default(1),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("month").optional(),
                        period: z.number().int().default(1),
                        day: z
                          .union([
                            z.number().int(),
                            z.tuple([
                              z.union([
                                z.literal("monday"),
                                z.literal("tuesday"),
                                z.literal("wednesday"),
                                z.literal("thursday"),
                                z.literal("friday"),
                                z.literal("saturday"),
                                z.literal("sunday"),
                              ]),
                              z.number().int(),
                            ]),
                          ])
                          .optional(),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("week").optional(),
                        period: z.number().int().default(1),
                        weekdays: z
                          .object({
                            monday: z.boolean().default(false),
                            tuesday: z.boolean().default(false),
                            wednesday: z.boolean().default(false),
                            thursday: z.boolean().default(false),
                            friday: z.boolean().default(false),
                            saturday: z.boolean().default(false),
                            sunday: z.boolean().default(false),
                          })
                          .strict()
                          .optional(),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("workday").optional(),
                        period: z.number().int().default(1),
                      })
                      .strict(),
                    z
                      .object({
                        every: z.literal("year").optional(),
                        period: z.number().int().default(1),
                        day: z.number().int().optional(),
                        month: z
                          .union([
                            z.literal("january"),
                            z.literal("february"),
                            z.literal("march"),
                            z.literal("april"),
                            z.literal("may"),
                            z.literal("june"),
                            z.literal("july"),
                            z.literal("august"),
                            z.literal("september"),
                            z.literal("october"),
                            z.literal("november"),
                            z.literal("december"),
                          ])
                          .optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
        ])
      ),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ every: z.boolean(),
    },
    async ({ recurrence, every }) => {
      try {
        const data = await sendRpcRequest("task_recurrent.to_string", [
          recurrence,
          every,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching task_recurrent.to_string: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "oauthAuthorize",
    "Obtain OAuth authorization code.",
    {
      /*
{"$id":"#oauth-client-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ client: z.string(),

      /*
{"$id":"#uri","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ redirect_uri: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ response_type: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["null","string"]}
*/ state: z.union([z.null(), z.string()]),
    },
    async ({ client, redirect_uri, response_type, state }) => {
      try {
        const data = await sendRpcRequest("oauth.authorize", [
          client,
          redirect_uri,
          response_type,
          state,
        ]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching oauth.authorize: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "oauthGetClient",
    "Fetch OAuth client from the API.",
    {
      /*
{"$id":"#oauth-client-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ client: z.string(),
    },
    async ({ client }) => {
      try {
        const data = await sendRpcRequest("oauth.get_client", [client]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching oauth.get_client: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "workspaceCurrent",
    "Get the currently used workspace",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("workspace.current", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching workspace.current: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("workspaceClear", "Clear workspace data", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("workspace.clear", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching workspace.clear: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "workspaceReset",
    "Delete local workspace data, clone from server",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("workspace.reset", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching workspace.reset: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "flagGet",
    "Get a flag value",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ flag: z.string(),
    },
    async ({ flag }) => {
      try {
        const data = await sendRpcRequest("flag.get", [flag]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching flag.get: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "flagSet",
    "Set a flag value",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ flag: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ value: z.boolean(),
    },
    async ({ flag, value }) => {
      try {
        const data = await sendRpcRequest("flag.set", [flag, value]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching flag.set: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("arch", "Architecture of this build.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("arch", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching arch: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "channel",
    "The release channel of this build.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("channel", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching channel: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("dev", "Whether this is a development build.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("dev", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching dev: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "distribution",
    "The distribution of this build.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("distribution", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching distribution: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "err",
    "Trigger a fatal error.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ message: z.string(),
    },
    async ({ message }) => {
      try {
        const data = await sendRpcRequest("err", [message]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching err: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "foreground",
    "Notify the controller whether it is being observed.",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"boolean"}
*/ foreground: z.boolean(),
    },
    async ({ foreground }) => {
      try {
        const data = await sendRpcRequest("foreground", [foreground]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching foreground: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("hostname", "Hostname.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("hostname", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching hostname: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("inbox", "Universal Inbox.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("inbox", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching inbox: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "inviteByEmail",
    "Invite contact to use Routine.",
    {
      /*
{"$id":"#account-id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ email: z.string(),
    },
    async ({ email }) => {
      try {
        const data = await sendRpcRequest("invite_by_email", [email]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching invite_by_email: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("logsDirectory", "The logs directory.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("logs_directory", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching logs_directory: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("logFile", "The current log file.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("log_file", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching log_file: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("now", "Current time down to the minute.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("now", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching now: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("online", "Whether we have connectivity.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("online", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching online: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool("os", "Operating system.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("os", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching os: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "pendingOperations",
    "Operations waiting to be pushed to the server.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("pending_operations", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching pending_operations: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("premium", "Whether the user is premium.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("premium", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching premium: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "sendMetric",
    "Send metric.",
    {
      /*
{"anyOf":[{"additionalProperties":false,"properties":{"object":{"const":"user","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"created","type":"string"},"first_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"First_name","type":"string"},"last_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Last_name","type":"string"},"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"deleted","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"logged_in","type":"string"},"device_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Device_id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"logged_out","type":"string"},"device_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Device_id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"invited","type":"string"},"email":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Email","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"nps_answered","type":"string"},"score":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Score","type":"integer"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"pmf_answered","type":"string"},"sentiment":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Sentiment","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#user-metrics-object","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"organization","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"created","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"deleted","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"added_user","type":"string"},"user_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"User_id","type":"string"},"role":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Role","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited_user","type":"string"},"user_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"User_id","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"removed_user","type":"string"},"user_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"User_id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"updated_plan","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#organization-metrics-object","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"workspace","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"created","type":"string"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"deleted","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"granted_user","type":"string"},"user_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"User_id","type":"string"},"permissions":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Permissions","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited_user","type":"string"},"user_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"User_id","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"revoked_user","type":"string"},"user_id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"User_id","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#workspace-metrics-object","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"integration","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"installed","type":"string"},"type_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Type_name","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"uninstalled","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"enabled","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"disabled","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#integration-metrics-object","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"type","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"created","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"},"name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Name","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","$ref":"#id","title":"Id"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"deleted","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#type-metrics-object","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"object","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"created","type":"string"},"path":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Path","type":"string"},"source":{"anyOf":[{"additionalProperties":false,"properties":{"type":{"const":"console","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"page_block","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"app_ui_element","type":"string"},"element_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Element_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"integration","type":"string"},"integration_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Integration_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"graph","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"type":{"const":"other","type":"string"},"source_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source_name","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#metrics-object-source","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Source","type":"object"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"edited","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"deleted","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"restored","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"},{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"},"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","const":"moved","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"workspace_id":{"title":"Workspace_id","type":"null"}},"$schema":"https://json-schema.org/draft/2019-09/schema"}],"$id":"#object-metrics-object","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"dashboard","type":"string"},"properties":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"opened","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"hidden","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"closed","type":"string"}],"$id":"#dashboard","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"console","type":"string"},"properties":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"submitted","type":"string"}],"$id":"#console","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"settings","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"},"property_name":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Property_name","type":"string"}},"$id":"#edit","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#settings","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"object":{"const":"hotkey","type":"string"},"properties":{"anyOf":[{"additionalProperties":false,"properties":{"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","type":"string"},"shortcut":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Shortcut","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","type":"string"},"shortcut":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Shortcut","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","type":"string"},"shortcut":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Shortcut","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"},{"additionalProperties":false,"properties":{"action":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Action","type":"string"},"current_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Current_value","type":"string"},"previous_value":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Previous_value","type":"string"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#hotkey","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Properties","type":"object"}},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}],"$id":"#metrics-event","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ kind: z.record(z.any()).and(
        z.union([
          z
            .object({
              object: z.literal("user").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("created").optional(),
                        first_name: z.string().optional(),
                        last_name: z.string().optional(),
                        email: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("edited").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("deleted").optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("logged_in").optional(),
                        device_id: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("logged_out").optional(),
                        device_id: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("invited").optional(),
                        email: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("nps_answered").optional(),
                        score: z.number().int().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.string().optional(),
                        action: z.literal("pmf_answered").optional(),
                        sentiment: z.string().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("organization").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("created").optional(),
                        name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("edited").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("deleted").optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("added_user").optional(),
                        user_id: z.string().optional(),
                        role: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("edited_user").optional(),
                        user_id: z.string().optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("removed_user").optional(),
                        user_id: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("updated_plan").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("workspace").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("created").optional(),
                        name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("edited").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("deleted").optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("granted_user").optional(),
                        user_id: z.string().optional(),
                        permissions: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("edited_user").optional(),
                        user_id: z.string().optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("revoked_user").optional(),
                        user_id: z.string().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("integration").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("installed").optional(),
                        type_name: z.string().optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("edited").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("uninstalled").optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("enabled").optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("disabled").optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("type").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("created").optional(),
                        workspace_id: z.null().optional(),
                        name: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("edited").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        id: z.any().optional(),
                        action: z.literal("deleted").optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("object").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        kind: z
                          .union([
                            z.literal("event"),
                            z.literal("event-rec"),
                            z.literal("page"),
                            z.literal("people"),
                            z.literal("task"),
                            z.literal("task-rec"),
                          ])
                          .optional(),
                        id: z.string().optional(),
                        action: z.literal("created").optional(),
                        path: z.string().optional(),
                        source: z
                          .record(z.any())
                          .and(
                            z.union([
                              z
                                .object({
                                  type: z.literal("console").optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  type: z.literal("page_block").optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  type: z.literal("app_ui_element").optional(),
                                  element_name: z.string().optional(),
                                })
                                .strict(),
                              z
                                .object({
                                  type: z.literal("integration").optional(),
                                  integration_name: z.string().optional(),
                                })
                                .strict(),
                              z
                                .object({ type: z.literal("graph").optional() })
                                .strict(),
                              z
                                .object({
                                  type: z.literal("other").optional(),
                                  source_name: z.string().optional(),
                                })
                                .strict(),
                            ])
                          )
                          .optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        kind: z
                          .union([
                            z.literal("event"),
                            z.literal("event-rec"),
                            z.literal("page"),
                            z.literal("people"),
                            z.literal("task"),
                            z.literal("task-rec"),
                          ])
                          .optional(),
                        id: z.string().optional(),
                        action: z.literal("edited").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        property_name: z.string().optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        kind: z
                          .union([
                            z.literal("event"),
                            z.literal("event-rec"),
                            z.literal("page"),
                            z.literal("people"),
                            z.literal("task"),
                            z.literal("task-rec"),
                          ])
                          .optional(),
                        id: z.string().optional(),
                        action: z.literal("deleted").optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        kind: z
                          .union([
                            z.literal("event"),
                            z.literal("event-rec"),
                            z.literal("page"),
                            z.literal("people"),
                            z.literal("task"),
                            z.literal("task-rec"),
                          ])
                          .optional(),
                        id: z.string().optional(),
                        action: z.literal("restored").optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        kind: z
                          .union([
                            z.literal("event"),
                            z.literal("event-rec"),
                            z.literal("page"),
                            z.literal("people"),
                            z.literal("task"),
                            z.literal("task-rec"),
                          ])
                          .optional(),
                        id: z.string().optional(),
                        action: z.literal("moved").optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                        workspace_id: z.null().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("dashboard").optional(),
              properties: z
                .union([
                  z.literal("opened"),
                  z.literal("hidden"),
                  z.literal("closed"),
                ])
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("console").optional(),
              properties: z.literal("submitted").optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("settings").optional(),
              properties: z
                .record(z.any())
                .and(
                  z
                    .object({
                      current_value: z.string().optional(),
                      previous_value: z.string().optional(),
                      property_name: z.string().optional(),
                    })
                    .strict()
                )
                .optional(),
            })
            .strict(),
          z
            .object({
              object: z.literal("hotkey").optional(),
              properties: z
                .record(z.any())
                .and(
                  z.union([
                    z
                      .object({
                        action: z.string().optional(),
                        shortcut: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        action: z.string().optional(),
                        shortcut: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        action: z.string().optional(),
                        shortcut: z.string().optional(),
                      })
                      .strict(),
                    z
                      .object({
                        action: z.string().optional(),
                        current_value: z.string().optional(),
                        previous_value: z.string().optional(),
                      })
                      .strict(),
                  ])
                )
                .optional(),
            })
            .strict(),
        ])
      ),

      /*
{"additionalProperties":{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"},"$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ attributes: z.record(z.string()),
    },
    async ({ kind, attributes }) => {
      try {
        const data = await sendRpcRequest("send_metric", [kind, attributes]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching send_metric: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "search",
    "Search for an object or note",
    {
      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":"string"}
*/ query: z.string(),

      /*
{"$schema":"https://json-schema.org/draft/2019-09/schema","type":["integer","null"]}
*/ limit: z.union([z.number().int(), z.null()]),
    },
    async ({ query, limit }) => {
      try {
        const data = await sendRpcRequest("search", [query, limit]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching search: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool(
    "stateStuck",
    "Whether pending operations have been stuck for more than 1 minute.",
    {},
    async ({}) => {
      try {
        const data = await sendRpcRequest("state_stuck", []);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching state_stuck: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("timezone", "Local timezone.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("timezone", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching timezone: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });

  server.tool(
    "useDestination",
    "Register that a destination was used, bumping its priority in completions.",
    {
      /*
{"additionalProperties":false,"properties":{"kind":{"anyOf":[{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"event-rec","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"page","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"people","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task","type":"string"},{"$schema":"https://json-schema.org/draft/2019-09/schema","const":"task-rec","type":"string"}],"$id":"#kind","$schema":"https://json-schema.org/draft/2019-09/schema","title":"Kind","type":"string"},"id":{"$schema":"https://json-schema.org/draft/2019-09/schema","title":"Id","type":"string"}},"$id":"#id","$schema":"https://json-schema.org/draft/2019-09/schema","type":"object"}
*/ id: z
        .object({
          kind: z
            .union([
              z.literal("event"),
              z.literal("event-rec"),
              z.literal("page"),
              z.literal("people"),
              z.literal("task"),
              z.literal("task-rec"),
            ])
            .optional(),
          id: z.string().optional(),
        })
        .strict(),
    },
    async ({ id }) => {
      try {
        const data = await sendRpcRequest("use_destination", [id]);
        return {
          content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
        };
      } catch (error) {
        logger.error("Error fetching use_destination: %o", error);
        return {
          content: [
            {
              type: "text",
              text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
            },
          ],
          isError: true,
        };
      }
    }
  );

  server.tool("version", "Controller version.", {}, async ({}) => {
    try {
      const data = await sendRpcRequest("version", []);
      return {
        content: [{ type: "text", text: JSON.stringify(data, null, 2) }],
      };
    } catch (error) {
      logger.error("Error fetching version: %o", error);
      return {
        content: [
          {
            type: "text",
            text: `Error fetching auth id: ${error instanceof Error ? error.message : String(error)}`,
          },
        ],
        isError: true,
      };
    }
  });
}
